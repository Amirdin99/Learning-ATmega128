
LcdAlarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000cae  00000d42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080014a  0080014a  00000d8c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000de8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014cf  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a44  00000000  00000000  0000238b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c4  00000000  00000000  00002dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00003594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000517  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b41  00000000  00000000  00003c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000047a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	90 c2       	rjmp	.+1312   	; 0x526 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 34       	cpi	r26, 0x4A	; 74
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e4       	ldi	r26, 0x4A	; 74
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 35       	cpi	r26, 0x52	; 82
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	36 d1       	rcall	.+620    	; 0x330 <main>
  c4:	f2 c5       	rjmp	.+3044   	; 0xcaa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_rCommand>:
{
	LCD_wBCommand(0x80 | (row + col * 0x40));
}

void LCD_Cur(char data)
{
  c8:	1a ba       	out	0x1a, r1	; 26
  ca:	a8 98       	cbi	0x15, 0	; 21
  cc:	a9 9a       	sbi	0x15, 1	; 21
  ce:	aa 9a       	sbi	0x15, 2	; 21
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_rCommand+0xa>
  d6:	00 00       	nop
  d8:	89 b3       	in	r24, 0x19	; 25
  da:	95 e0       	ldi	r25, 0x05	; 5
  dc:	9a 95       	dec	r25
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_rCommand+0x14>
  e0:	00 00       	nop
  e2:	aa 98       	cbi	0x15, 2	; 21
  e4:	9f ef       	ldi	r25, 0xFF	; 255
  e6:	9a bb       	out	0x1a, r25	; 26
  e8:	95 e0       	ldi	r25, 0x05	; 5
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_rCommand+0x22>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <LCD_wCommand>:
  f2:	a8 98       	cbi	0x15, 0	; 21
  f4:	a9 98       	cbi	0x15, 1	; 21
  f6:	aa 9a       	sbi	0x15, 2	; 21
  f8:	8b bb       	out	0x1b, r24	; 27
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_wCommand+0xa>
 100:	00 00       	nop
 102:	aa 98       	cbi	0x15, 2	; 21
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_wCommand+0x14>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <LCD_wBCommand>:
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 112:	04 c0       	rjmp	.+8      	; 0x11c <LCD_wBCommand+0xe>
 114:	85 e0       	ldi	r24, 0x05	; 5
 116:	8a 95       	dec	r24
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_wBCommand+0x8>
 11a:	00 00       	nop
 11c:	d5 df       	rcall	.-86     	; 0xc8 <LCD_rCommand>
 11e:	88 23       	and	r24, r24
 120:	cc f3       	brlt	.-14     	; 0x114 <LCD_wBCommand+0x6>
 122:	a8 98       	cbi	0x15, 0	; 21
 124:	a9 98       	cbi	0x15, 1	; 21
 126:	aa 9a       	sbi	0x15, 2	; 21
 128:	cb bb       	out	0x1b, r28	; 27
 12a:	85 e0       	ldi	r24, 0x05	; 5
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_wBCommand+0x1e>
 130:	00 00       	nop
 132:	aa 98       	cbi	0x15, 2	; 21
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_wBCommand+0x28>
 13a:	00 00       	nop
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	81 ee       	ldi	r24, 0xE1	; 225
 144:	94 e0       	ldi	r25, 0x04	; 4
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <LCD_Init+0x6>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_Init+0x10>
 150:	00 00       	nop
// 텍스트 LCD를 초기화하는 함수
void LCD_Init(void)
{
	_delay_ms(100);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 152:	88 e3       	ldi	r24, 0x38	; 56
 154:	ce df       	rcall	.-100    	; 0xf2 <LCD_wCommand>
 156:	8f e3       	ldi	r24, 0x3F	; 63
 158:	9c e9       	ldi	r25, 0x9C	; 156
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Init+0x1a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Init+0x20>
 160:	00 00       	nop
	_delay_ms(10);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 162:	88 e3       	ldi	r24, 0x38	; 56
 164:	c6 df       	rcall	.-116    	; 0xf2 <LCD_wCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	8f e1       	ldi	r24, 0x1F	; 31
 168:	93 e0       	ldi	r25, 0x03	; 3
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Init+0x2a>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Init+0x30>
	_delay_us(200);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 170:	00 00       	nop
 172:	88 e3       	ldi	r24, 0x38	; 56
 174:	be df       	rcall	.-132    	; 0xf2 <LCD_wCommand>
 176:	8f e1       	ldi	r24, 0x1F	; 31
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_Init+0x3a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_Init+0x40>
	_delay_us(200);
	
	// 비지 플래그를 체크하는 Function Set
	LCD_wBCommand(0x38);
 180:	00 00       	nop
 182:	88 e3       	ldi	r24, 0x38	; 56
	// 비지 플래그를 체크하는 Display On/Off Control
	LCD_wBCommand(0x0c);
 184:	c4 df       	rcall	.-120    	; 0x10e <LCD_wBCommand>
 186:	8c e0       	ldi	r24, 0x0C	; 12
 188:	c2 df       	rcall	.-124    	; 0x10e <LCD_wBCommand>
	// 비지 플래그를 체크하는 Clear Display
	LCD_wBCommand(0x01);
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	c0 cf       	rjmp	.-128    	; 0x10e <LCD_wBCommand>
 18e:	08 95       	ret

00000190 <LCD_wData>:
 190:	cf 93       	push	r28
}

void LCD_wData(char dat)
{
 192:	c8 2f       	mov	r28, r24
	while(LCD_BusyCheck(LCD_rCommand()))
 194:	04 c0       	rjmp	.+8      	; 0x19e <LCD_wData+0xe>
 196:	85 e0       	ldi	r24, 0x05	; 5
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_wData+0x8>
 19c:	00 00       	nop
 19e:	94 df       	rcall	.-216    	; 0xc8 <LCD_rCommand>
 1a0:	88 23       	and	r24, r24
 1a2:	cc f3       	brlt	.-14     	; 0x196 <LCD_wData+0x6>
	{
		_delay_us(1);	
	}
	sbi(LCD_CON, LCD_RS);
 1a4:	a8 9a       	sbi	0x15, 0	; 21
	cbi(LCD_CON, LCD_RW);
 1a6:	a9 98       	cbi	0x15, 1	; 21
	sbi(LCD_CON, LCD_E);
 1a8:	aa 9a       	sbi	0x15, 2	; 21
	LCD_DATA = dat;
 1aa:	cb bb       	out	0x1b, r28	; 27
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCD_wData+0x1e>
 1b2:	00 00       	nop
	_delay_us(1);
	cbi(LCD_CON, LCD_E);
 1b4:	aa 98       	cbi	0x15, 2	; 21
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_wData+0x28>
 1bc:	00 00       	nop
	_delay_us(1);
}
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <LCD_wString>:

void LCD_wString(char *str)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
	while(*str)
 1c8:	88 81       	ld	r24, Y
 1ca:	88 23       	and	r24, r24
 1cc:	29 f0       	breq	.+10     	; 0x1d8 <LCD_wString+0x16>
 1ce:	21 96       	adiw	r28, 0x01	; 1
		LCD_wData(*str++);
 1d0:	df df       	rcall	.-66     	; 0x190 <LCD_wData>
	_delay_us(1);
}

void LCD_wString(char *str)
{
	while(*str)
 1d2:	89 91       	ld	r24, Y+
 1d4:	81 11       	cpse	r24, r1
 1d6:	fc cf       	rjmp	.-8      	; 0x1d0 <LCD_wString+0xe>
		LCD_wData(*str++);
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <getRow>:
int jump=1;
int jump_cnt=0;
hurdle hur[ARRAY];

int getRow(int idx)
{
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
	int i, row;
	do
	{
		row = 15 + rand() % 10;
 1e8:	0a e0       	ldi	r16, 0x0A	; 10
 1ea:	10 e0       	ldi	r17, 0x00	; 0
 1ec:	18 d2       	rcall	.+1072   	; 0x61e <rand>
 1ee:	b8 01       	movw	r22, r16
 1f0:	a8 d1       	rcall	.+848    	; 0x542 <__divmodhi4>
 1f2:	0f 96       	adiw	r24, 0x0f	; 15
 1f4:	ec e4       	ldi	r30, 0x4C	; 76
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
		for (i = 0; i < ARRAY; i++)
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	50 e0       	ldi	r21, 0x00	; 0
		{
			if (i == idx)
 1fc:	c4 17       	cp	r28, r20
 1fe:	d5 07       	cpc	r29, r21
 200:	49 f0       	breq	.+18     	; 0x214 <getRow+0x36>
				continue;
			if (abs(hur[i].x - row) < 3)
 202:	21 81       	ldd	r18, Z+1	; 0x01
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	28 1b       	sub	r18, r24
 208:	39 0b       	sbc	r19, r25
 20a:	2e 5f       	subi	r18, 0xFE	; 254
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	25 30       	cpi	r18, 0x05	; 5
 210:	31 05       	cpc	r19, r1
 212:	38 f0       	brcs	.+14     	; 0x222 <getRow+0x44>
{
	int i, row;
	do
	{
		row = 15 + rand() % 10;
		for (i = 0; i < ARRAY; i++)
 214:	4f 5f       	subi	r20, 0xFF	; 255
 216:	5f 4f       	sbci	r21, 0xFF	; 255
 218:	32 96       	adiw	r30, 0x02	; 2
 21a:	43 30       	cpi	r20, 0x03	; 3
 21c:	51 05       	cpc	r21, r1
 21e:	71 f7       	brne	.-36     	; 0x1fc <getRow+0x1e>
 220:	03 c0       	rjmp	.+6      	; 0x228 <getRow+0x4a>
			if (abs(hur[i].x - row) < 3)
			{
				break;
			}
		}
	} while (i != ARRAY);
 222:	43 30       	cpi	r20, 0x03	; 3
 224:	51 05       	cpc	r21, r1
 226:	11 f7       	brne	.-60     	; 0x1ec <getRow+0xe>
	return row;
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <move_hurdle>:

void move_hurdle()
{
	for (int i = 0; i < ARRAY; i++)
	{
		hur[i].x--;
 232:	ec e4       	ldi	r30, 0x4C	; 76
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	81 81       	ldd	r24, Z+1	; 0x01
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	81 83       	std	Z+1, r24	; 0x01
 23c:	83 81       	ldd	r24, Z+3	; 0x03
 23e:	81 50       	subi	r24, 0x01	; 1
 240:	83 83       	std	Z+3, r24	; 0x03
 242:	85 81       	ldd	r24, Z+5	; 0x05
 244:	81 50       	subi	r24, 0x01	; 1
 246:	85 83       	std	Z+5, r24	; 0x05
 248:	08 95       	ret

0000024a <print_hurdle>:
	}
}

void print_hurdle()
{
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cc e4       	ldi	r28, 0x4C	; 76
 254:	d1 e0       	ldi	r29, 0x01	; 1
 256:	02 e5       	ldi	r16, 0x52	; 82
 258:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = 0; i < ARRAY; i++)
	{
		if (0 <= hur[i].x && hur[i].x <= 15)
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	80 31       	cpi	r24, 0x10	; 16
 25e:	70 f4       	brcc	.+28     	; 0x27c <print_hurdle+0x32>
	_delay_us(1);
}

void LCD_Cursor(char col, char row)
{
	LCD_wBCommand(0x80 | (row + col * 0x40));
 260:	98 81       	ld	r25, Y
 262:	20 e4       	ldi	r18, 0x40	; 64
 264:	92 9f       	mul	r25, r18
 266:	80 0d       	add	r24, r0
 268:	11 24       	eor	r1, r1
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	50 df       	rcall	.-352    	; 0x10e <LCD_wBCommand>
		{
			LCD_Cursor(hur[i].y, hur[i].x);
			LCD_wData(hur[i].y ? 'I' : '*');	
 26e:	88 81       	ld	r24, Y
 270:	81 11       	cpse	r24, r1
 272:	02 c0       	rjmp	.+4      	; 0x278 <print_hurdle+0x2e>
 274:	8a e2       	ldi	r24, 0x2A	; 42
 276:	01 c0       	rjmp	.+2      	; 0x27a <print_hurdle+0x30>
 278:	89 e4       	ldi	r24, 0x49	; 73
 27a:	8a df       	rcall	.-236    	; 0x190 <LCD_wData>
 27c:	22 96       	adiw	r28, 0x02	; 2
	}
}

void print_hurdle()
{
	for (int i = 0; i < ARRAY; i++)
 27e:	c0 17       	cp	r28, r16
 280:	d1 07       	cpc	r29, r17
 282:	59 f7       	brne	.-42     	; 0x25a <print_hurdle+0x10>
		{
			LCD_Cursor(hur[i].y, hur[i].x);
			LCD_wData(hur[i].y ? 'I' : '*');	
		}
	}
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	08 95       	ret

0000028e <refresh_hurdle>:

void refresh_hurdle()
{
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cc e4       	ldi	r28, 0x4C	; 76
 29c:	d1 e0       	ldi	r29, 0x01	; 1
	for (int i = 0; i < ARRAY; i++)
 29e:	00 e0       	ldi	r16, 0x00	; 0
 2a0:	10 e0       	ldi	r17, 0x00	; 0
 2a2:	7e 01       	movw	r14, r28
	{
		if (hur[i].x == 0xFF)
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	8f 3f       	cpi	r24, 0xFF	; 255
 2a8:	79 f4       	brne	.+30     	; 0x2c8 <refresh_hurdle+0x3a>
		{
			hur[i].y = rand() % 2;
 2aa:	b9 d1       	rcall	.+882    	; 0x61e <rand>
 2ac:	81 70       	andi	r24, 0x01	; 1
 2ae:	90 78       	andi	r25, 0x80	; 128
 2b0:	99 23       	and	r25, r25
 2b2:	24 f4       	brge	.+8      	; 0x2bc <refresh_hurdle+0x2e>
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	8e 6f       	ori	r24, 0xFE	; 254
 2b8:	9f 6f       	ori	r25, 0xFF	; 255
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	f7 01       	movw	r30, r14
 2be:	80 83       	st	Z, r24
			hur[i].x = getRow(i);
 2c0:	c8 01       	movw	r24, r16
 2c2:	8d df       	rcall	.-230    	; 0x1de <getRow>
 2c4:	f7 01       	movw	r30, r14
 2c6:	81 83       	std	Z+1, r24	; 0x01
	}
}

void refresh_hurdle()
{
	for (int i = 0; i < ARRAY; i++)
 2c8:	0f 5f       	subi	r16, 0xFF	; 255
 2ca:	1f 4f       	sbci	r17, 0xFF	; 255
 2cc:	22 96       	adiw	r28, 0x02	; 2
 2ce:	03 30       	cpi	r16, 0x03	; 3
 2d0:	11 05       	cpc	r17, r1
 2d2:	39 f7       	brne	.-50     	; 0x2a2 <refresh_hurdle+0x14>
		{
			hur[i].y = rand() % 2;
			hur[i].x = getRow(i);
		}
	}
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	08 95       	ret

000002e2 <init_hurdle>:

void init_hurdle()
{
 2e2:	ef 92       	push	r14
 2e4:	ff 92       	push	r15
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	0c e4       	ldi	r16, 0x4C	; 76
 2f0:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = 0; i < ARRAY; i++)
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		hur[i].x = getRow(i);
 2f6:	ce 01       	movw	r24, r28
 2f8:	72 df       	rcall	.-284    	; 0x1de <getRow>
 2fa:	78 01       	movw	r14, r16
 2fc:	f8 01       	movw	r30, r16
 2fe:	81 83       	std	Z+1, r24	; 0x01
		hur[i].y = rand() % 2;
 300:	8e d1       	rcall	.+796    	; 0x61e <rand>
 302:	81 70       	andi	r24, 0x01	; 1
 304:	90 78       	andi	r25, 0x80	; 128
 306:	99 23       	and	r25, r25
 308:	24 f4       	brge	.+8      	; 0x312 <init_hurdle+0x30>
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	8e 6f       	ori	r24, 0xFE	; 254
 30e:	9f 6f       	ori	r25, 0xFF	; 255
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	f7 01       	movw	r30, r14
 314:	80 83       	st	Z, r24
 316:	21 96       	adiw	r28, 0x01	; 1
	}
}

void init_hurdle()
{
	for (int i = 0; i < ARRAY; i++)
 318:	0e 5f       	subi	r16, 0xFE	; 254
 31a:	1f 4f       	sbci	r17, 0xFF	; 255
 31c:	c3 30       	cpi	r28, 0x03	; 3
 31e:	d1 05       	cpc	r29, r1
 320:	51 f7       	brne	.-44     	; 0x2f6 <init_hurdle+0x14>
 322:	df 91       	pop	r29
	{
		hur[i].x = getRow(i);
		hur[i].y = rand() % 2;
	}
}
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	08 95       	ret

00000330 <main>:
 330:	cf 93       	push	r28

int main()
{
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
 338:	61 97       	sbiw	r28, 0x11	; 17
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	f8 94       	cli
 33e:	de bf       	out	0x3e, r29	; 62
 340:	0f be       	out	0x3f, r0	; 63
 342:	cd bf       	out	0x3d, r28	; 61
	int cnt= 0;
	int score=0;
	DDRA = 0xFF;
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 348:	84 bb       	out	0x14, r24	; 20
	
	EIMSK = 0x01;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	89 bf       	out	0x39, r24	; 57
	EICRA = 0x03;
 34e:	83 e0       	ldi	r24, 0x03	; 3
 350:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	
	memset(hur, 0, sizeof(hurdle) * ARRAY);
 354:	86 e0       	ldi	r24, 0x06	; 6
 356:	ec e4       	ldi	r30, 0x4C	; 76
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	df 01       	movw	r26, r30
 35c:	1d 92       	st	X+, r1
 35e:	8a 95       	dec	r24
 360:	e9 f7       	brne	.-6      	; 0x35c <main+0x2c>
	init_hurdle();
 362:	bf df       	rcall	.-130    	; 0x2e2 <init_hurdle>
	sei();
	LCD_Init();
 364:	78 94       	sei
 366:	ec de       	rcall	.-552    	; 0x140 <LCD_Init>
}

int main()
{
	int cnt= 0;
	int score=0;
 368:	a1 2c       	mov	r10, r1
 36a:	b1 2c       	mov	r11, r1
	}
}

int main()
{
	int cnt= 0;
 36c:	00 e0       	ldi	r16, 0x00	; 0
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	0f 2e       	mov	r0, r31
 372:	f4 e0       	ldi	r31, 0x04	; 4
 374:	6f 2e       	mov	r6, r31
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	7f 2e       	mov	r7, r31
 37a:	f0 2d       	mov	r31, r0
		LCD_wString("O");
		if(jump==0) 
		{
			if (jump_cnt++ > 80) 
			{
				jump = 1;
 37c:	88 24       	eor	r8, r8
 37e:	83 94       	inc	r8
 380:	91 2c       	mov	r9, r1
 382:	0f 2e       	mov	r0, r31
 384:	f2 e5       	ldi	r31, 0x52	; 82
 386:	ef 2e       	mov	r14, r31
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	ff 2e       	mov	r15, r31
 38c:	f0 2d       	mov	r31, r0
		for(int i = 0; i < ARRAY; i++)
		{
			if(hur[i].x == 0 && hur[i].y == jump)
			{
				// 장애물과 부딫혔는지 확인
				char str[17] = {0};
 38e:	fe 01       	movw	r30, r28
 390:	31 96       	adiw	r30, 0x01	; 1
 392:	2f 01       	movw	r4, r30
				LCD_Cursor(0, 0);
				LCD_wString("  GAME OVER     ");
				LCD_Cursor(1, 0);
				sprintf(str, "  score : %5d ", score);
 394:	0f 2e       	mov	r0, r31
 396:	f9 e1       	ldi	r31, 0x19	; 25
 398:	2f 2e       	mov	r2, r31
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	3f 2e       	mov	r3, r31
 39e:	f0 2d       	mov	r31, r0
 3a0:	80 e8       	ldi	r24, 0x80	; 128
	LCD_Init();
	
	while (1)
	{	
		LCD_Cursor(0, 0);
		LCD_wString(" ");
 3a2:	b5 de       	rcall	.-662    	; 0x10e <LCD_wBCommand>
 3a4:	88 e4       	ldi	r24, 0x48	; 72
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0c df       	rcall	.-488    	; 0x1c2 <LCD_wString>
 3aa:	80 ec       	ldi	r24, 0xC0	; 192
		LCD_Cursor(1, 0);
		LCD_wString(" ");
 3ac:	b0 de       	rcall	.-672    	; 0x10e <LCD_wBCommand>
 3ae:	88 e4       	ldi	r24, 0x48	; 72
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	07 df       	rcall	.-498    	; 0x1c2 <LCD_wString>
 3b4:	d3 01       	movw	r26, r6
 3b6:	8c 91       	ld	r24, X
 3b8:	82 95       	swap	r24
 3ba:	88 0f       	add	r24, r24
 3bc:	88 0f       	add	r24, r24
 3be:	80 7c       	andi	r24, 0xC0	; 192
 3c0:	80 68       	ori	r24, 0x80	; 128
		LCD_Cursor(jump, 0);
		LCD_wString("O");
 3c2:	a5 de       	rcall	.-694    	; 0x10e <LCD_wBCommand>
 3c4:	86 e0       	ldi	r24, 0x06	; 6
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	fc de       	rcall	.-520    	; 0x1c2 <LCD_wString>
		if(jump==0) 
 3ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <jump>
 3ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <jump+0x1>
 3d2:	89 2b       	or	r24, r25
 3d4:	b1 f4       	brne	.+44     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			if (jump_cnt++ > 80) 
 3d6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
 3da:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <__data_end+0x1>
 3de:	9c 01       	movw	r18, r24
 3e0:	2f 5f       	subi	r18, 0xFF	; 255
 3e2:	3f 4f       	sbci	r19, 0xFF	; 255
 3e4:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <__data_end+0x1>
 3e8:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <__data_end>
 3ec:	81 35       	cpi	r24, 0x51	; 81
 3ee:	91 05       	cpc	r25, r1
 3f0:	44 f0       	brlt	.+16     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			{
				jump = 1;
 3f2:	90 92 05 01 	sts	0x0105, r9	; 0x800105 <jump+0x1>
 3f6:	80 92 04 01 	sts	0x0104, r8	; 0x800104 <jump>
				jump_cnt=0;
 3fa:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <__data_end+0x1>
			}
		}
		
		if (cnt++ > 50)
 3fe:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
		{
			refresh_hurdle();
 402:	03 33       	cpi	r16, 0x33	; 51
 404:	11 05       	cpc	r17, r1
			move_hurdle();
 406:	34 f0       	brlt	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 408:	42 df       	rcall	.-380    	; 0x28e <refresh_hurdle>
			print_hurdle();
 40a:	13 df       	rcall	.-474    	; 0x232 <move_hurdle>
 40c:	1e df       	rcall	.-452    	; 0x24a <print_hurdle>
			cnt = 0;
 40e:	c1 2c       	mov	r12, r1
 410:	d1 2c       	mov	r13, r1
		}
		else if (cnt++ > 40)
 412:	16 c0       	rjmp	.+44     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 414:	68 01       	movw	r12, r16
 416:	b2 e0       	ldi	r27, 0x02	; 2
 418:	cb 0e       	add	r12, r27
 41a:	d1 1c       	adc	r13, r1
 41c:	0f 5f       	subi	r16, 0xFF	; 255
 41e:	1f 4f       	sbci	r17, 0xFF	; 255
 420:	09 32       	cpi	r16, 0x29	; 41
 422:	11 05       	cpc	r17, r1
 424:	6c f0       	brlt	.+26     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		{
			LCD_Cursor(1, 1);
			LCD_wString("               ");
 426:	81 ec       	ldi	r24, 0xC1	; 193
 428:	72 de       	rcall	.-796    	; 0x10e <LCD_wBCommand>
 42a:	8a e3       	ldi	r24, 0x3A	; 58
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	c9 de       	rcall	.-622    	; 0x1c2 <LCD_wString>
 430:	81 e8       	ldi	r24, 0x81	; 129
 432:	6d de       	rcall	.-806    	; 0x10e <LCD_wBCommand>
			LCD_Cursor(0, 1);
			LCD_wString("               ");
 434:	8a e3       	ldi	r24, 0x3A	; 58
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	c4 de       	rcall	.-632    	; 0x1c2 <LCD_wString>
 43a:	ef ef       	ldi	r30, 0xFF	; 255
			score++;
 43c:	ae 1a       	sub	r10, r30
 43e:	be 0a       	sbc	r11, r30
 440:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <jump>
		}
		
		for(int i = 0; i < ARRAY; i++)
		{
			if(hur[i].x == 0 && hur[i].y == jump)
 444:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <jump+0x1>
 448:	ec e4       	ldi	r30, 0x4C	; 76
 44a:	f1 e0       	ldi	r31, 0x01	; 1
 44c:	81 81       	ldd	r24, Z+1	; 0x01
 44e:	81 11       	cpse	r24, r1
 450:	38 c0       	rjmp	.+112    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 452:	80 81       	ld	r24, Z
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	82 17       	cp	r24, r18
 458:	93 07       	cpc	r25, r19
			{
				// 장애물과 부딫혔는지 확인
				char str[17] = {0};
 45a:	99 f5       	brne	.+102    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 45c:	d2 01       	movw	r26, r4
 45e:	e1 e1       	ldi	r30, 0x11	; 17
 460:	1d 92       	st	X+, r1
 462:	ea 95       	dec	r30
 464:	e9 f7       	brne	.-6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
				LCD_Cursor(0, 0);
				LCD_wString("  GAME OVER     ");
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	52 de       	rcall	.-860    	; 0x10e <LCD_wBCommand>
 46a:	88 e0       	ldi	r24, 0x08	; 8
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	a9 de       	rcall	.-686    	; 0x1c2 <LCD_wString>
 470:	80 ec       	ldi	r24, 0xC0	; 192
				LCD_Cursor(1, 0);
				sprintf(str, "  score : %5d ", score);
 472:	4d de       	rcall	.-870    	; 0x10e <LCD_wBCommand>
 474:	bf 92       	push	r11
 476:	af 92       	push	r10
 478:	3f 92       	push	r3
 47a:	2f 92       	push	r2
 47c:	5f 92       	push	r5
 47e:	4f 92       	push	r4
 480:	dc d0       	rcall	.+440    	; 0x63a <sprintf>
				LCD_wString(str);
 482:	c2 01       	movw	r24, r4
 484:	9e de       	rcall	.-708    	; 0x1c2 <LCD_wString>
				score=0;
				jump = 1;
 486:	90 92 05 01 	sts	0x0105, r9	; 0x800105 <jump+0x1>
 48a:	80 92 04 01 	sts	0x0104, r8	; 0x800104 <jump>
				jump_cnt = 0;
 48e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <__data_end+0x1>
 492:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
				cnt = 0;
				init_hurdle();
 496:	25 df       	rcall	.-438    	; 0x2e2 <init_hurdle>
 498:	ff ef       	ldi	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49a:	2b e7       	ldi	r18, 0x7B	; 123
 49c:	82 e9       	ldi	r24, 0x92	; 146
 49e:	f1 50       	subi	r31, 0x01	; 1
 4a0:	20 40       	sbci	r18, 0x00	; 0
 4a2:	80 40       	sbci	r24, 0x00	; 0
 4a4:	e1 f7       	brne	.-8      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4a8:	00 00       	nop
 4aa:	cf de       	rcall	.-610    	; 0x24a <print_hurdle>
				_delay_ms(3000);
				print_hurdle();
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	0f 90       	pop	r0
				LCD_Cursor(0, 0);
				LCD_wString("  GAME OVER     ");
				LCD_Cursor(1, 0);
				sprintf(str, "  score : %5d ", score);
				LCD_wString(str);
				score=0;
 4b8:	a1 2c       	mov	r10, r1
 4ba:	b1 2c       	mov	r11, r1
				jump = 1;
				jump_cnt = 0;
				cnt = 0;
 4bc:	c1 2c       	mov	r12, r1
 4be:	d1 2c       	mov	r13, r1
 4c0:	2a c0       	rjmp	.+84     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
			LCD_Cursor(0, 1);
			LCD_wString("               ");
			score++;
		}
		
		for(int i = 0; i < ARRAY; i++)
 4c2:	32 96       	adiw	r30, 0x02	; 2
 4c4:	ee 15       	cp	r30, r14
 4c6:	ff 05       	cpc	r31, r15
 4c8:	09 f0       	breq	.+2      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
				print_hurdle();
				break;
			}
		}
		
		if (score > 500)
 4ca:	c0 cf       	rjmp	.-128    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 4cc:	95 ef       	ldi	r25, 0xF5	; 245
 4ce:	a9 16       	cp	r10, r25
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	b9 06       	cpc	r11, r25
 4d4:	04 f1       	brlt	.+64     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 4d6:	80 e8       	ldi	r24, 0x80	; 128
 4d8:	1a de       	rcall	.-972    	; 0x10e <LCD_wBCommand>
		{
			LCD_Cursor(0, 0);
			LCD_wString("  GAME CLEAR    ");
 4da:	88 e2       	ldi	r24, 0x28	; 40
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	71 de       	rcall	.-798    	; 0x1c2 <LCD_wString>
 4e0:	80 ec       	ldi	r24, 0xC0	; 192
 4e2:	15 de       	rcall	.-982    	; 0x10e <LCD_wBCommand>
 4e4:	89 e3       	ldi	r24, 0x39	; 57
			LCD_Cursor(1, 0);
			LCD_wString("                ");
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	6c de       	rcall	.-808    	; 0x1c2 <LCD_wString>
 4ea:	af ef       	ldi	r26, 0xFF	; 255
 4ec:	bb e7       	ldi	r27, 0x7B	; 123
 4ee:	e2 e9       	ldi	r30, 0x92	; 146
 4f0:	a1 50       	subi	r26, 0x01	; 1
 4f2:	b0 40       	sbci	r27, 0x00	; 0
 4f4:	e0 40       	sbci	r30, 0x00	; 0
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4f8:	00 c0       	rjmp	.+0      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4fa:	00 00       	nop
 4fc:	90 92 05 01 	sts	0x0105, r9	; 0x800105 <jump+0x1>
			_delay_ms(3000);
			score=0;
			jump = 1;
 500:	80 92 04 01 	sts	0x0104, r8	; 0x800104 <jump>
 504:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <__data_end+0x1>
			jump_cnt = 0;
 508:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
 50c:	ea de       	rcall	.-556    	; 0x2e2 <init_hurdle>
 50e:	a1 2c       	mov	r10, r1
			cnt = 0;
			init_hurdle();
 510:	b1 2c       	mov	r11, r1
 512:	c1 2c       	mov	r12, r1
			LCD_Cursor(0, 0);
			LCD_wString("  GAME CLEAR    ");
			LCD_Cursor(1, 0);
			LCD_wString("                ");
			_delay_ms(3000);
			score=0;
 514:	d1 2c       	mov	r13, r1
 516:	8f e3       	ldi	r24, 0x3F	; 63
			jump = 1;
			jump_cnt = 0;
			cnt = 0;
 518:	9c e9       	ldi	r25, 0x9C	; 156
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 520:	00 00       	nop
 522:	86 01       	movw	r16, r12
 524:	3d cf       	rjmp	.-390    	; 0x3a0 <main+0x70>

00000526 <__vector_1>:
 526:	1f 92       	push	r1
 528:	0f 92       	push	r0
 52a:	0f b6       	in	r0, 0x3f	; 63
		_delay_ms(10);
	}
}

ISR(INT0_vect)
{
 52c:	0f 92       	push	r0
 52e:	11 24       	eor	r1, r1
	 jump=0;
 530:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <jump+0x1>
 534:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <jump>
}
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <__divmodhi4>:
 542:	97 fb       	bst	r25, 7
 544:	07 2e       	mov	r0, r23
 546:	16 f4       	brtc	.+4      	; 0x54c <__divmodhi4+0xa>
 548:	00 94       	com	r0
 54a:	06 d0       	rcall	.+12     	; 0x558 <__divmodhi4_neg1>
 54c:	77 fd       	sbrc	r23, 7
 54e:	08 d0       	rcall	.+16     	; 0x560 <__divmodhi4_neg2>
 550:	0b d0       	rcall	.+22     	; 0x568 <__udivmodhi4>
 552:	07 fc       	sbrc	r0, 7
 554:	05 d0       	rcall	.+10     	; 0x560 <__divmodhi4_neg2>
 556:	3e f4       	brtc	.+14     	; 0x566 <__divmodhi4_exit>

00000558 <__divmodhi4_neg1>:
 558:	90 95       	com	r25
 55a:	81 95       	neg	r24
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	08 95       	ret

00000560 <__divmodhi4_neg2>:
 560:	70 95       	com	r23
 562:	61 95       	neg	r22
 564:	7f 4f       	sbci	r23, 0xFF	; 255

00000566 <__divmodhi4_exit>:
 566:	08 95       	ret

00000568 <__udivmodhi4>:
 568:	aa 1b       	sub	r26, r26
 56a:	bb 1b       	sub	r27, r27
 56c:	51 e1       	ldi	r21, 0x11	; 17
 56e:	07 c0       	rjmp	.+14     	; 0x57e <__udivmodhi4_ep>

00000570 <__udivmodhi4_loop>:
 570:	aa 1f       	adc	r26, r26
 572:	bb 1f       	adc	r27, r27
 574:	a6 17       	cp	r26, r22
 576:	b7 07       	cpc	r27, r23
 578:	10 f0       	brcs	.+4      	; 0x57e <__udivmodhi4_ep>
 57a:	a6 1b       	sub	r26, r22
 57c:	b7 0b       	sbc	r27, r23

0000057e <__udivmodhi4_ep>:
 57e:	88 1f       	adc	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	5a 95       	dec	r21
 584:	a9 f7       	brne	.-22     	; 0x570 <__udivmodhi4_loop>
 586:	80 95       	com	r24
 588:	90 95       	com	r25
 58a:	bc 01       	movw	r22, r24
 58c:	cd 01       	movw	r24, r26
 58e:	08 95       	ret

00000590 <do_rand>:
 590:	8f 92       	push	r8
 592:	9f 92       	push	r9
 594:	af 92       	push	r10
 596:	bf 92       	push	r11
 598:	cf 92       	push	r12
 59a:	df 92       	push	r13
 59c:	ef 92       	push	r14
 59e:	ff 92       	push	r15
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	ec 01       	movw	r28, r24
 5a6:	68 81       	ld	r22, Y
 5a8:	79 81       	ldd	r23, Y+1	; 0x01
 5aa:	8a 81       	ldd	r24, Y+2	; 0x02
 5ac:	9b 81       	ldd	r25, Y+3	; 0x03
 5ae:	61 15       	cp	r22, r1
 5b0:	71 05       	cpc	r23, r1
 5b2:	81 05       	cpc	r24, r1
 5b4:	91 05       	cpc	r25, r1
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <do_rand+0x30>
 5b8:	64 e2       	ldi	r22, 0x24	; 36
 5ba:	79 ed       	ldi	r23, 0xD9	; 217
 5bc:	8b e5       	ldi	r24, 0x5B	; 91
 5be:	97 e0       	ldi	r25, 0x07	; 7
 5c0:	2d e1       	ldi	r18, 0x1D	; 29
 5c2:	33 ef       	ldi	r19, 0xF3	; 243
 5c4:	41 e0       	ldi	r20, 0x01	; 1
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	13 d3       	rcall	.+1574   	; 0xbf0 <__divmodsi4>
 5ca:	49 01       	movw	r8, r18
 5cc:	5a 01       	movw	r10, r20
 5ce:	9b 01       	movw	r18, r22
 5d0:	ac 01       	movw	r20, r24
 5d2:	a7 ea       	ldi	r26, 0xA7	; 167
 5d4:	b1 e4       	ldi	r27, 0x41	; 65
 5d6:	28 d3       	rcall	.+1616   	; 0xc28 <__muluhisi3>
 5d8:	6b 01       	movw	r12, r22
 5da:	7c 01       	movw	r14, r24
 5dc:	ac ee       	ldi	r26, 0xEC	; 236
 5de:	b4 ef       	ldi	r27, 0xF4	; 244
 5e0:	a5 01       	movw	r20, r10
 5e2:	94 01       	movw	r18, r8
 5e4:	2d d3       	rcall	.+1626   	; 0xc40 <__mulohisi3>
 5e6:	dc 01       	movw	r26, r24
 5e8:	cb 01       	movw	r24, r22
 5ea:	8c 0d       	add	r24, r12
 5ec:	9d 1d       	adc	r25, r13
 5ee:	ae 1d       	adc	r26, r14
 5f0:	bf 1d       	adc	r27, r15
 5f2:	b7 ff       	sbrs	r27, 7
 5f4:	03 c0       	rjmp	.+6      	; 0x5fc <do_rand+0x6c>
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	a1 09       	sbc	r26, r1
 5fa:	b0 48       	sbci	r27, 0x80	; 128
 5fc:	88 83       	st	Y, r24
 5fe:	99 83       	std	Y+1, r25	; 0x01
 600:	aa 83       	std	Y+2, r26	; 0x02
 602:	bb 83       	std	Y+3, r27	; 0x03
 604:	9f 77       	andi	r25, 0x7F	; 127
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	ff 90       	pop	r15
 60c:	ef 90       	pop	r14
 60e:	df 90       	pop	r13
 610:	cf 90       	pop	r12
 612:	bf 90       	pop	r11
 614:	af 90       	pop	r10
 616:	9f 90       	pop	r9
 618:	8f 90       	pop	r8
 61a:	08 95       	ret

0000061c <rand_r>:
 61c:	b9 cf       	rjmp	.-142    	; 0x590 <do_rand>

0000061e <rand>:
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	b6 cf       	rjmp	.-148    	; 0x590 <do_rand>

00000624 <srand>:
 624:	a0 e0       	ldi	r26, 0x00	; 0
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 62c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 630:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 634:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 638:	08 95       	ret

0000063a <sprintf>:
 63a:	0f 93       	push	r16
 63c:	1f 93       	push	r17
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	2e 97       	sbiw	r28, 0x0e	; 14
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	f8 94       	cli
 64c:	de bf       	out	0x3e, r29	; 62
 64e:	0f be       	out	0x3f, r0	; 63
 650:	cd bf       	out	0x3d, r28	; 61
 652:	0d 89       	ldd	r16, Y+21	; 0x15
 654:	1e 89       	ldd	r17, Y+22	; 0x16
 656:	86 e0       	ldi	r24, 0x06	; 6
 658:	8c 83       	std	Y+4, r24	; 0x04
 65a:	1a 83       	std	Y+2, r17	; 0x02
 65c:	09 83       	std	Y+1, r16	; 0x01
 65e:	8f ef       	ldi	r24, 0xFF	; 255
 660:	9f e7       	ldi	r25, 0x7F	; 127
 662:	9e 83       	std	Y+6, r25	; 0x06
 664:	8d 83       	std	Y+5, r24	; 0x05
 666:	ae 01       	movw	r20, r28
 668:	47 5e       	subi	r20, 0xE7	; 231
 66a:	5f 4f       	sbci	r21, 0xFF	; 255
 66c:	6f 89       	ldd	r22, Y+23	; 0x17
 66e:	78 8d       	ldd	r23, Y+24	; 0x18
 670:	ce 01       	movw	r24, r28
 672:	01 96       	adiw	r24, 0x01	; 1
 674:	10 d0       	rcall	.+32     	; 0x696 <vfprintf>
 676:	ef 81       	ldd	r30, Y+7	; 0x07
 678:	f8 85       	ldd	r31, Y+8	; 0x08
 67a:	e0 0f       	add	r30, r16
 67c:	f1 1f       	adc	r31, r17
 67e:	10 82       	st	Z, r1
 680:	2e 96       	adiw	r28, 0x0e	; 14
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	f8 94       	cli
 686:	de bf       	out	0x3e, r29	; 62
 688:	0f be       	out	0x3f, r0	; 63
 68a:	cd bf       	out	0x3d, r28	; 61
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	08 95       	ret

00000696 <vfprintf>:
 696:	2f 92       	push	r2
 698:	3f 92       	push	r3
 69a:	4f 92       	push	r4
 69c:	5f 92       	push	r5
 69e:	6f 92       	push	r6
 6a0:	7f 92       	push	r7
 6a2:	8f 92       	push	r8
 6a4:	9f 92       	push	r9
 6a6:	af 92       	push	r10
 6a8:	bf 92       	push	r11
 6aa:	cf 92       	push	r12
 6ac:	df 92       	push	r13
 6ae:	ef 92       	push	r14
 6b0:	ff 92       	push	r15
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
 6be:	2b 97       	sbiw	r28, 0x0b	; 11
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	f8 94       	cli
 6c4:	de bf       	out	0x3e, r29	; 62
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	cd bf       	out	0x3d, r28	; 61
 6ca:	6c 01       	movw	r12, r24
 6cc:	7b 01       	movw	r14, r22
 6ce:	8a 01       	movw	r16, r20
 6d0:	fc 01       	movw	r30, r24
 6d2:	17 82       	std	Z+7, r1	; 0x07
 6d4:	16 82       	std	Z+6, r1	; 0x06
 6d6:	83 81       	ldd	r24, Z+3	; 0x03
 6d8:	81 ff       	sbrs	r24, 1
 6da:	bf c1       	rjmp	.+894    	; 0xa5a <vfprintf+0x3c4>
 6dc:	ce 01       	movw	r24, r28
 6de:	01 96       	adiw	r24, 0x01	; 1
 6e0:	3c 01       	movw	r6, r24
 6e2:	f6 01       	movw	r30, r12
 6e4:	93 81       	ldd	r25, Z+3	; 0x03
 6e6:	f7 01       	movw	r30, r14
 6e8:	93 fd       	sbrc	r25, 3
 6ea:	85 91       	lpm	r24, Z+
 6ec:	93 ff       	sbrs	r25, 3
 6ee:	81 91       	ld	r24, Z+
 6f0:	7f 01       	movw	r14, r30
 6f2:	88 23       	and	r24, r24
 6f4:	09 f4       	brne	.+2      	; 0x6f8 <vfprintf+0x62>
 6f6:	ad c1       	rjmp	.+858    	; 0xa52 <vfprintf+0x3bc>
 6f8:	85 32       	cpi	r24, 0x25	; 37
 6fa:	39 f4       	brne	.+14     	; 0x70a <vfprintf+0x74>
 6fc:	93 fd       	sbrc	r25, 3
 6fe:	85 91       	lpm	r24, Z+
 700:	93 ff       	sbrs	r25, 3
 702:	81 91       	ld	r24, Z+
 704:	7f 01       	movw	r14, r30
 706:	85 32       	cpi	r24, 0x25	; 37
 708:	21 f4       	brne	.+8      	; 0x712 <vfprintf+0x7c>
 70a:	b6 01       	movw	r22, r12
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	d6 d1       	rcall	.+940    	; 0xabc <fputc>
 710:	e8 cf       	rjmp	.-48     	; 0x6e2 <vfprintf+0x4c>
 712:	91 2c       	mov	r9, r1
 714:	21 2c       	mov	r2, r1
 716:	31 2c       	mov	r3, r1
 718:	ff e1       	ldi	r31, 0x1F	; 31
 71a:	f3 15       	cp	r31, r3
 71c:	d8 f0       	brcs	.+54     	; 0x754 <vfprintf+0xbe>
 71e:	8b 32       	cpi	r24, 0x2B	; 43
 720:	79 f0       	breq	.+30     	; 0x740 <vfprintf+0xaa>
 722:	38 f4       	brcc	.+14     	; 0x732 <vfprintf+0x9c>
 724:	80 32       	cpi	r24, 0x20	; 32
 726:	79 f0       	breq	.+30     	; 0x746 <vfprintf+0xb0>
 728:	83 32       	cpi	r24, 0x23	; 35
 72a:	a1 f4       	brne	.+40     	; 0x754 <vfprintf+0xbe>
 72c:	23 2d       	mov	r18, r3
 72e:	20 61       	ori	r18, 0x10	; 16
 730:	1d c0       	rjmp	.+58     	; 0x76c <vfprintf+0xd6>
 732:	8d 32       	cpi	r24, 0x2D	; 45
 734:	61 f0       	breq	.+24     	; 0x74e <vfprintf+0xb8>
 736:	80 33       	cpi	r24, 0x30	; 48
 738:	69 f4       	brne	.+26     	; 0x754 <vfprintf+0xbe>
 73a:	23 2d       	mov	r18, r3
 73c:	21 60       	ori	r18, 0x01	; 1
 73e:	16 c0       	rjmp	.+44     	; 0x76c <vfprintf+0xd6>
 740:	83 2d       	mov	r24, r3
 742:	82 60       	ori	r24, 0x02	; 2
 744:	38 2e       	mov	r3, r24
 746:	e3 2d       	mov	r30, r3
 748:	e4 60       	ori	r30, 0x04	; 4
 74a:	3e 2e       	mov	r3, r30
 74c:	2a c0       	rjmp	.+84     	; 0x7a2 <vfprintf+0x10c>
 74e:	f3 2d       	mov	r31, r3
 750:	f8 60       	ori	r31, 0x08	; 8
 752:	1d c0       	rjmp	.+58     	; 0x78e <vfprintf+0xf8>
 754:	37 fc       	sbrc	r3, 7
 756:	2d c0       	rjmp	.+90     	; 0x7b2 <vfprintf+0x11c>
 758:	20 ed       	ldi	r18, 0xD0	; 208
 75a:	28 0f       	add	r18, r24
 75c:	2a 30       	cpi	r18, 0x0A	; 10
 75e:	40 f0       	brcs	.+16     	; 0x770 <vfprintf+0xda>
 760:	8e 32       	cpi	r24, 0x2E	; 46
 762:	b9 f4       	brne	.+46     	; 0x792 <vfprintf+0xfc>
 764:	36 fc       	sbrc	r3, 6
 766:	75 c1       	rjmp	.+746    	; 0xa52 <vfprintf+0x3bc>
 768:	23 2d       	mov	r18, r3
 76a:	20 64       	ori	r18, 0x40	; 64
 76c:	32 2e       	mov	r3, r18
 76e:	19 c0       	rjmp	.+50     	; 0x7a2 <vfprintf+0x10c>
 770:	36 fe       	sbrs	r3, 6
 772:	06 c0       	rjmp	.+12     	; 0x780 <vfprintf+0xea>
 774:	8a e0       	ldi	r24, 0x0A	; 10
 776:	98 9e       	mul	r9, r24
 778:	20 0d       	add	r18, r0
 77a:	11 24       	eor	r1, r1
 77c:	92 2e       	mov	r9, r18
 77e:	11 c0       	rjmp	.+34     	; 0x7a2 <vfprintf+0x10c>
 780:	ea e0       	ldi	r30, 0x0A	; 10
 782:	2e 9e       	mul	r2, r30
 784:	20 0d       	add	r18, r0
 786:	11 24       	eor	r1, r1
 788:	22 2e       	mov	r2, r18
 78a:	f3 2d       	mov	r31, r3
 78c:	f0 62       	ori	r31, 0x20	; 32
 78e:	3f 2e       	mov	r3, r31
 790:	08 c0       	rjmp	.+16     	; 0x7a2 <vfprintf+0x10c>
 792:	8c 36       	cpi	r24, 0x6C	; 108
 794:	21 f4       	brne	.+8      	; 0x79e <vfprintf+0x108>
 796:	83 2d       	mov	r24, r3
 798:	80 68       	ori	r24, 0x80	; 128
 79a:	38 2e       	mov	r3, r24
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <vfprintf+0x10c>
 79e:	88 36       	cpi	r24, 0x68	; 104
 7a0:	41 f4       	brne	.+16     	; 0x7b2 <vfprintf+0x11c>
 7a2:	f7 01       	movw	r30, r14
 7a4:	93 fd       	sbrc	r25, 3
 7a6:	85 91       	lpm	r24, Z+
 7a8:	93 ff       	sbrs	r25, 3
 7aa:	81 91       	ld	r24, Z+
 7ac:	7f 01       	movw	r14, r30
 7ae:	81 11       	cpse	r24, r1
 7b0:	b3 cf       	rjmp	.-154    	; 0x718 <vfprintf+0x82>
 7b2:	98 2f       	mov	r25, r24
 7b4:	9f 7d       	andi	r25, 0xDF	; 223
 7b6:	95 54       	subi	r25, 0x45	; 69
 7b8:	93 30       	cpi	r25, 0x03	; 3
 7ba:	28 f4       	brcc	.+10     	; 0x7c6 <vfprintf+0x130>
 7bc:	0c 5f       	subi	r16, 0xFC	; 252
 7be:	1f 4f       	sbci	r17, 0xFF	; 255
 7c0:	9f e3       	ldi	r25, 0x3F	; 63
 7c2:	99 83       	std	Y+1, r25	; 0x01
 7c4:	0d c0       	rjmp	.+26     	; 0x7e0 <vfprintf+0x14a>
 7c6:	83 36       	cpi	r24, 0x63	; 99
 7c8:	31 f0       	breq	.+12     	; 0x7d6 <vfprintf+0x140>
 7ca:	83 37       	cpi	r24, 0x73	; 115
 7cc:	71 f0       	breq	.+28     	; 0x7ea <vfprintf+0x154>
 7ce:	83 35       	cpi	r24, 0x53	; 83
 7d0:	09 f0       	breq	.+2      	; 0x7d4 <vfprintf+0x13e>
 7d2:	55 c0       	rjmp	.+170    	; 0x87e <vfprintf+0x1e8>
 7d4:	20 c0       	rjmp	.+64     	; 0x816 <vfprintf+0x180>
 7d6:	f8 01       	movw	r30, r16
 7d8:	80 81       	ld	r24, Z
 7da:	89 83       	std	Y+1, r24	; 0x01
 7dc:	0e 5f       	subi	r16, 0xFE	; 254
 7de:	1f 4f       	sbci	r17, 0xFF	; 255
 7e0:	88 24       	eor	r8, r8
 7e2:	83 94       	inc	r8
 7e4:	91 2c       	mov	r9, r1
 7e6:	53 01       	movw	r10, r6
 7e8:	12 c0       	rjmp	.+36     	; 0x80e <vfprintf+0x178>
 7ea:	28 01       	movw	r4, r16
 7ec:	f2 e0       	ldi	r31, 0x02	; 2
 7ee:	4f 0e       	add	r4, r31
 7f0:	51 1c       	adc	r5, r1
 7f2:	f8 01       	movw	r30, r16
 7f4:	a0 80       	ld	r10, Z
 7f6:	b1 80       	ldd	r11, Z+1	; 0x01
 7f8:	36 fe       	sbrs	r3, 6
 7fa:	03 c0       	rjmp	.+6      	; 0x802 <vfprintf+0x16c>
 7fc:	69 2d       	mov	r22, r9
 7fe:	70 e0       	ldi	r23, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <vfprintf+0x170>
 802:	6f ef       	ldi	r22, 0xFF	; 255
 804:	7f ef       	ldi	r23, 0xFF	; 255
 806:	c5 01       	movw	r24, r10
 808:	4e d1       	rcall	.+668    	; 0xaa6 <strnlen>
 80a:	4c 01       	movw	r8, r24
 80c:	82 01       	movw	r16, r4
 80e:	f3 2d       	mov	r31, r3
 810:	ff 77       	andi	r31, 0x7F	; 127
 812:	3f 2e       	mov	r3, r31
 814:	15 c0       	rjmp	.+42     	; 0x840 <vfprintf+0x1aa>
 816:	28 01       	movw	r4, r16
 818:	22 e0       	ldi	r18, 0x02	; 2
 81a:	42 0e       	add	r4, r18
 81c:	51 1c       	adc	r5, r1
 81e:	f8 01       	movw	r30, r16
 820:	a0 80       	ld	r10, Z
 822:	b1 80       	ldd	r11, Z+1	; 0x01
 824:	36 fe       	sbrs	r3, 6
 826:	03 c0       	rjmp	.+6      	; 0x82e <vfprintf+0x198>
 828:	69 2d       	mov	r22, r9
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0x19c>
 82e:	6f ef       	ldi	r22, 0xFF	; 255
 830:	7f ef       	ldi	r23, 0xFF	; 255
 832:	c5 01       	movw	r24, r10
 834:	2d d1       	rcall	.+602    	; 0xa90 <strnlen_P>
 836:	4c 01       	movw	r8, r24
 838:	f3 2d       	mov	r31, r3
 83a:	f0 68       	ori	r31, 0x80	; 128
 83c:	3f 2e       	mov	r3, r31
 83e:	82 01       	movw	r16, r4
 840:	33 fc       	sbrc	r3, 3
 842:	19 c0       	rjmp	.+50     	; 0x876 <vfprintf+0x1e0>
 844:	82 2d       	mov	r24, r2
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	88 16       	cp	r8, r24
 84a:	99 06       	cpc	r9, r25
 84c:	a0 f4       	brcc	.+40     	; 0x876 <vfprintf+0x1e0>
 84e:	b6 01       	movw	r22, r12
 850:	80 e2       	ldi	r24, 0x20	; 32
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	33 d1       	rcall	.+614    	; 0xabc <fputc>
 856:	2a 94       	dec	r2
 858:	f5 cf       	rjmp	.-22     	; 0x844 <vfprintf+0x1ae>
 85a:	f5 01       	movw	r30, r10
 85c:	37 fc       	sbrc	r3, 7
 85e:	85 91       	lpm	r24, Z+
 860:	37 fe       	sbrs	r3, 7
 862:	81 91       	ld	r24, Z+
 864:	5f 01       	movw	r10, r30
 866:	b6 01       	movw	r22, r12
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	28 d1       	rcall	.+592    	; 0xabc <fputc>
 86c:	21 10       	cpse	r2, r1
 86e:	2a 94       	dec	r2
 870:	21 e0       	ldi	r18, 0x01	; 1
 872:	82 1a       	sub	r8, r18
 874:	91 08       	sbc	r9, r1
 876:	81 14       	cp	r8, r1
 878:	91 04       	cpc	r9, r1
 87a:	79 f7       	brne	.-34     	; 0x85a <vfprintf+0x1c4>
 87c:	e1 c0       	rjmp	.+450    	; 0xa40 <vfprintf+0x3aa>
 87e:	84 36       	cpi	r24, 0x64	; 100
 880:	11 f0       	breq	.+4      	; 0x886 <vfprintf+0x1f0>
 882:	89 36       	cpi	r24, 0x69	; 105
 884:	39 f5       	brne	.+78     	; 0x8d4 <vfprintf+0x23e>
 886:	f8 01       	movw	r30, r16
 888:	37 fe       	sbrs	r3, 7
 88a:	07 c0       	rjmp	.+14     	; 0x89a <vfprintf+0x204>
 88c:	60 81       	ld	r22, Z
 88e:	71 81       	ldd	r23, Z+1	; 0x01
 890:	82 81       	ldd	r24, Z+2	; 0x02
 892:	93 81       	ldd	r25, Z+3	; 0x03
 894:	0c 5f       	subi	r16, 0xFC	; 252
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	08 c0       	rjmp	.+16     	; 0x8aa <vfprintf+0x214>
 89a:	60 81       	ld	r22, Z
 89c:	71 81       	ldd	r23, Z+1	; 0x01
 89e:	07 2e       	mov	r0, r23
 8a0:	00 0c       	add	r0, r0
 8a2:	88 0b       	sbc	r24, r24
 8a4:	99 0b       	sbc	r25, r25
 8a6:	0e 5f       	subi	r16, 0xFE	; 254
 8a8:	1f 4f       	sbci	r17, 0xFF	; 255
 8aa:	f3 2d       	mov	r31, r3
 8ac:	ff 76       	andi	r31, 0x6F	; 111
 8ae:	3f 2e       	mov	r3, r31
 8b0:	97 ff       	sbrs	r25, 7
 8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <vfprintf+0x230>
 8b4:	90 95       	com	r25
 8b6:	80 95       	com	r24
 8b8:	70 95       	com	r23
 8ba:	61 95       	neg	r22
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	f0 68       	ori	r31, 0x80	; 128
 8c4:	3f 2e       	mov	r3, r31
 8c6:	2a e0       	ldi	r18, 0x0A	; 10
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	a3 01       	movw	r20, r6
 8cc:	33 d1       	rcall	.+614    	; 0xb34 <__ultoa_invert>
 8ce:	88 2e       	mov	r8, r24
 8d0:	86 18       	sub	r8, r6
 8d2:	44 c0       	rjmp	.+136    	; 0x95c <vfprintf+0x2c6>
 8d4:	85 37       	cpi	r24, 0x75	; 117
 8d6:	31 f4       	brne	.+12     	; 0x8e4 <vfprintf+0x24e>
 8d8:	23 2d       	mov	r18, r3
 8da:	2f 7e       	andi	r18, 0xEF	; 239
 8dc:	b2 2e       	mov	r11, r18
 8de:	2a e0       	ldi	r18, 0x0A	; 10
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	25 c0       	rjmp	.+74     	; 0x92e <vfprintf+0x298>
 8e4:	93 2d       	mov	r25, r3
 8e6:	99 7f       	andi	r25, 0xF9	; 249
 8e8:	b9 2e       	mov	r11, r25
 8ea:	8f 36       	cpi	r24, 0x6F	; 111
 8ec:	c1 f0       	breq	.+48     	; 0x91e <vfprintf+0x288>
 8ee:	18 f4       	brcc	.+6      	; 0x8f6 <vfprintf+0x260>
 8f0:	88 35       	cpi	r24, 0x58	; 88
 8f2:	79 f0       	breq	.+30     	; 0x912 <vfprintf+0x27c>
 8f4:	ae c0       	rjmp	.+348    	; 0xa52 <vfprintf+0x3bc>
 8f6:	80 37       	cpi	r24, 0x70	; 112
 8f8:	19 f0       	breq	.+6      	; 0x900 <vfprintf+0x26a>
 8fa:	88 37       	cpi	r24, 0x78	; 120
 8fc:	21 f0       	breq	.+8      	; 0x906 <vfprintf+0x270>
 8fe:	a9 c0       	rjmp	.+338    	; 0xa52 <vfprintf+0x3bc>
 900:	e9 2f       	mov	r30, r25
 902:	e0 61       	ori	r30, 0x10	; 16
 904:	be 2e       	mov	r11, r30
 906:	b4 fe       	sbrs	r11, 4
 908:	0d c0       	rjmp	.+26     	; 0x924 <vfprintf+0x28e>
 90a:	fb 2d       	mov	r31, r11
 90c:	f4 60       	ori	r31, 0x04	; 4
 90e:	bf 2e       	mov	r11, r31
 910:	09 c0       	rjmp	.+18     	; 0x924 <vfprintf+0x28e>
 912:	34 fe       	sbrs	r3, 4
 914:	0a c0       	rjmp	.+20     	; 0x92a <vfprintf+0x294>
 916:	29 2f       	mov	r18, r25
 918:	26 60       	ori	r18, 0x06	; 6
 91a:	b2 2e       	mov	r11, r18
 91c:	06 c0       	rjmp	.+12     	; 0x92a <vfprintf+0x294>
 91e:	28 e0       	ldi	r18, 0x08	; 8
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	05 c0       	rjmp	.+10     	; 0x92e <vfprintf+0x298>
 924:	20 e1       	ldi	r18, 0x10	; 16
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <vfprintf+0x298>
 92a:	20 e1       	ldi	r18, 0x10	; 16
 92c:	32 e0       	ldi	r19, 0x02	; 2
 92e:	f8 01       	movw	r30, r16
 930:	b7 fe       	sbrs	r11, 7
 932:	07 c0       	rjmp	.+14     	; 0x942 <vfprintf+0x2ac>
 934:	60 81       	ld	r22, Z
 936:	71 81       	ldd	r23, Z+1	; 0x01
 938:	82 81       	ldd	r24, Z+2	; 0x02
 93a:	93 81       	ldd	r25, Z+3	; 0x03
 93c:	0c 5f       	subi	r16, 0xFC	; 252
 93e:	1f 4f       	sbci	r17, 0xFF	; 255
 940:	06 c0       	rjmp	.+12     	; 0x94e <vfprintf+0x2b8>
 942:	60 81       	ld	r22, Z
 944:	71 81       	ldd	r23, Z+1	; 0x01
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 5f       	subi	r16, 0xFE	; 254
 94c:	1f 4f       	sbci	r17, 0xFF	; 255
 94e:	a3 01       	movw	r20, r6
 950:	f1 d0       	rcall	.+482    	; 0xb34 <__ultoa_invert>
 952:	88 2e       	mov	r8, r24
 954:	86 18       	sub	r8, r6
 956:	fb 2d       	mov	r31, r11
 958:	ff 77       	andi	r31, 0x7F	; 127
 95a:	3f 2e       	mov	r3, r31
 95c:	36 fe       	sbrs	r3, 6
 95e:	0d c0       	rjmp	.+26     	; 0x97a <vfprintf+0x2e4>
 960:	23 2d       	mov	r18, r3
 962:	2e 7f       	andi	r18, 0xFE	; 254
 964:	a2 2e       	mov	r10, r18
 966:	89 14       	cp	r8, r9
 968:	58 f4       	brcc	.+22     	; 0x980 <vfprintf+0x2ea>
 96a:	34 fe       	sbrs	r3, 4
 96c:	0b c0       	rjmp	.+22     	; 0x984 <vfprintf+0x2ee>
 96e:	32 fc       	sbrc	r3, 2
 970:	09 c0       	rjmp	.+18     	; 0x984 <vfprintf+0x2ee>
 972:	83 2d       	mov	r24, r3
 974:	8e 7e       	andi	r24, 0xEE	; 238
 976:	a8 2e       	mov	r10, r24
 978:	05 c0       	rjmp	.+10     	; 0x984 <vfprintf+0x2ee>
 97a:	b8 2c       	mov	r11, r8
 97c:	a3 2c       	mov	r10, r3
 97e:	03 c0       	rjmp	.+6      	; 0x986 <vfprintf+0x2f0>
 980:	b8 2c       	mov	r11, r8
 982:	01 c0       	rjmp	.+2      	; 0x986 <vfprintf+0x2f0>
 984:	b9 2c       	mov	r11, r9
 986:	a4 fe       	sbrs	r10, 4
 988:	0f c0       	rjmp	.+30     	; 0x9a8 <vfprintf+0x312>
 98a:	fe 01       	movw	r30, r28
 98c:	e8 0d       	add	r30, r8
 98e:	f1 1d       	adc	r31, r1
 990:	80 81       	ld	r24, Z
 992:	80 33       	cpi	r24, 0x30	; 48
 994:	21 f4       	brne	.+8      	; 0x99e <vfprintf+0x308>
 996:	9a 2d       	mov	r25, r10
 998:	99 7e       	andi	r25, 0xE9	; 233
 99a:	a9 2e       	mov	r10, r25
 99c:	09 c0       	rjmp	.+18     	; 0x9b0 <vfprintf+0x31a>
 99e:	a2 fe       	sbrs	r10, 2
 9a0:	06 c0       	rjmp	.+12     	; 0x9ae <vfprintf+0x318>
 9a2:	b3 94       	inc	r11
 9a4:	b3 94       	inc	r11
 9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <vfprintf+0x31a>
 9a8:	8a 2d       	mov	r24, r10
 9aa:	86 78       	andi	r24, 0x86	; 134
 9ac:	09 f0       	breq	.+2      	; 0x9b0 <vfprintf+0x31a>
 9ae:	b3 94       	inc	r11
 9b0:	a3 fc       	sbrc	r10, 3
 9b2:	10 c0       	rjmp	.+32     	; 0x9d4 <vfprintf+0x33e>
 9b4:	a0 fe       	sbrs	r10, 0
 9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <vfprintf+0x32e>
 9b8:	b2 14       	cp	r11, r2
 9ba:	80 f4       	brcc	.+32     	; 0x9dc <vfprintf+0x346>
 9bc:	28 0c       	add	r2, r8
 9be:	92 2c       	mov	r9, r2
 9c0:	9b 18       	sub	r9, r11
 9c2:	0d c0       	rjmp	.+26     	; 0x9de <vfprintf+0x348>
 9c4:	b2 14       	cp	r11, r2
 9c6:	58 f4       	brcc	.+22     	; 0x9de <vfprintf+0x348>
 9c8:	b6 01       	movw	r22, r12
 9ca:	80 e2       	ldi	r24, 0x20	; 32
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	76 d0       	rcall	.+236    	; 0xabc <fputc>
 9d0:	b3 94       	inc	r11
 9d2:	f8 cf       	rjmp	.-16     	; 0x9c4 <vfprintf+0x32e>
 9d4:	b2 14       	cp	r11, r2
 9d6:	18 f4       	brcc	.+6      	; 0x9de <vfprintf+0x348>
 9d8:	2b 18       	sub	r2, r11
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <vfprintf+0x34a>
 9dc:	98 2c       	mov	r9, r8
 9de:	21 2c       	mov	r2, r1
 9e0:	a4 fe       	sbrs	r10, 4
 9e2:	0f c0       	rjmp	.+30     	; 0xa02 <vfprintf+0x36c>
 9e4:	b6 01       	movw	r22, r12
 9e6:	80 e3       	ldi	r24, 0x30	; 48
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	68 d0       	rcall	.+208    	; 0xabc <fputc>
 9ec:	a2 fe       	sbrs	r10, 2
 9ee:	16 c0       	rjmp	.+44     	; 0xa1c <vfprintf+0x386>
 9f0:	a1 fc       	sbrc	r10, 1
 9f2:	03 c0       	rjmp	.+6      	; 0x9fa <vfprintf+0x364>
 9f4:	88 e7       	ldi	r24, 0x78	; 120
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <vfprintf+0x368>
 9fa:	88 e5       	ldi	r24, 0x58	; 88
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	b6 01       	movw	r22, r12
 a00:	0c c0       	rjmp	.+24     	; 0xa1a <vfprintf+0x384>
 a02:	8a 2d       	mov	r24, r10
 a04:	86 78       	andi	r24, 0x86	; 134
 a06:	51 f0       	breq	.+20     	; 0xa1c <vfprintf+0x386>
 a08:	a1 fe       	sbrs	r10, 1
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <vfprintf+0x37a>
 a0c:	8b e2       	ldi	r24, 0x2B	; 43
 a0e:	01 c0       	rjmp	.+2      	; 0xa12 <vfprintf+0x37c>
 a10:	80 e2       	ldi	r24, 0x20	; 32
 a12:	a7 fc       	sbrc	r10, 7
 a14:	8d e2       	ldi	r24, 0x2D	; 45
 a16:	b6 01       	movw	r22, r12
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	50 d0       	rcall	.+160    	; 0xabc <fputc>
 a1c:	89 14       	cp	r8, r9
 a1e:	30 f4       	brcc	.+12     	; 0xa2c <vfprintf+0x396>
 a20:	b6 01       	movw	r22, r12
 a22:	80 e3       	ldi	r24, 0x30	; 48
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	4a d0       	rcall	.+148    	; 0xabc <fputc>
 a28:	9a 94       	dec	r9
 a2a:	f8 cf       	rjmp	.-16     	; 0xa1c <vfprintf+0x386>
 a2c:	8a 94       	dec	r8
 a2e:	f3 01       	movw	r30, r6
 a30:	e8 0d       	add	r30, r8
 a32:	f1 1d       	adc	r31, r1
 a34:	80 81       	ld	r24, Z
 a36:	b6 01       	movw	r22, r12
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	40 d0       	rcall	.+128    	; 0xabc <fputc>
 a3c:	81 10       	cpse	r8, r1
 a3e:	f6 cf       	rjmp	.-20     	; 0xa2c <vfprintf+0x396>
 a40:	22 20       	and	r2, r2
 a42:	09 f4       	brne	.+2      	; 0xa46 <vfprintf+0x3b0>
 a44:	4e ce       	rjmp	.-868    	; 0x6e2 <vfprintf+0x4c>
 a46:	b6 01       	movw	r22, r12
 a48:	80 e2       	ldi	r24, 0x20	; 32
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	37 d0       	rcall	.+110    	; 0xabc <fputc>
 a4e:	2a 94       	dec	r2
 a50:	f7 cf       	rjmp	.-18     	; 0xa40 <vfprintf+0x3aa>
 a52:	f6 01       	movw	r30, r12
 a54:	86 81       	ldd	r24, Z+6	; 0x06
 a56:	97 81       	ldd	r25, Z+7	; 0x07
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <vfprintf+0x3c8>
 a5a:	8f ef       	ldi	r24, 0xFF	; 255
 a5c:	9f ef       	ldi	r25, 0xFF	; 255
 a5e:	2b 96       	adiw	r28, 0x0b	; 11
 a60:	0f b6       	in	r0, 0x3f	; 63
 a62:	f8 94       	cli
 a64:	de bf       	out	0x3e, r29	; 62
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	cd bf       	out	0x3d, r28	; 61
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	1f 91       	pop	r17
 a70:	0f 91       	pop	r16
 a72:	ff 90       	pop	r15
 a74:	ef 90       	pop	r14
 a76:	df 90       	pop	r13
 a78:	cf 90       	pop	r12
 a7a:	bf 90       	pop	r11
 a7c:	af 90       	pop	r10
 a7e:	9f 90       	pop	r9
 a80:	8f 90       	pop	r8
 a82:	7f 90       	pop	r7
 a84:	6f 90       	pop	r6
 a86:	5f 90       	pop	r5
 a88:	4f 90       	pop	r4
 a8a:	3f 90       	pop	r3
 a8c:	2f 90       	pop	r2
 a8e:	08 95       	ret

00000a90 <strnlen_P>:
 a90:	fc 01       	movw	r30, r24
 a92:	05 90       	lpm	r0, Z+
 a94:	61 50       	subi	r22, 0x01	; 1
 a96:	70 40       	sbci	r23, 0x00	; 0
 a98:	01 10       	cpse	r0, r1
 a9a:	d8 f7       	brcc	.-10     	; 0xa92 <strnlen_P+0x2>
 a9c:	80 95       	com	r24
 a9e:	90 95       	com	r25
 aa0:	8e 0f       	add	r24, r30
 aa2:	9f 1f       	adc	r25, r31
 aa4:	08 95       	ret

00000aa6 <strnlen>:
 aa6:	fc 01       	movw	r30, r24
 aa8:	61 50       	subi	r22, 0x01	; 1
 aaa:	70 40       	sbci	r23, 0x00	; 0
 aac:	01 90       	ld	r0, Z+
 aae:	01 10       	cpse	r0, r1
 ab0:	d8 f7       	brcc	.-10     	; 0xaa8 <strnlen+0x2>
 ab2:	80 95       	com	r24
 ab4:	90 95       	com	r25
 ab6:	8e 0f       	add	r24, r30
 ab8:	9f 1f       	adc	r25, r31
 aba:	08 95       	ret

00000abc <fputc>:
 abc:	0f 93       	push	r16
 abe:	1f 93       	push	r17
 ac0:	cf 93       	push	r28
 ac2:	df 93       	push	r29
 ac4:	fb 01       	movw	r30, r22
 ac6:	23 81       	ldd	r18, Z+3	; 0x03
 ac8:	21 fd       	sbrc	r18, 1
 aca:	03 c0       	rjmp	.+6      	; 0xad2 <fputc+0x16>
 acc:	8f ef       	ldi	r24, 0xFF	; 255
 ace:	9f ef       	ldi	r25, 0xFF	; 255
 ad0:	2c c0       	rjmp	.+88     	; 0xb2a <fputc+0x6e>
 ad2:	22 ff       	sbrs	r18, 2
 ad4:	16 c0       	rjmp	.+44     	; 0xb02 <fputc+0x46>
 ad6:	46 81       	ldd	r20, Z+6	; 0x06
 ad8:	57 81       	ldd	r21, Z+7	; 0x07
 ada:	24 81       	ldd	r18, Z+4	; 0x04
 adc:	35 81       	ldd	r19, Z+5	; 0x05
 ade:	42 17       	cp	r20, r18
 ae0:	53 07       	cpc	r21, r19
 ae2:	44 f4       	brge	.+16     	; 0xaf4 <fputc+0x38>
 ae4:	a0 81       	ld	r26, Z
 ae6:	b1 81       	ldd	r27, Z+1	; 0x01
 ae8:	9d 01       	movw	r18, r26
 aea:	2f 5f       	subi	r18, 0xFF	; 255
 aec:	3f 4f       	sbci	r19, 0xFF	; 255
 aee:	31 83       	std	Z+1, r19	; 0x01
 af0:	20 83       	st	Z, r18
 af2:	8c 93       	st	X, r24
 af4:	26 81       	ldd	r18, Z+6	; 0x06
 af6:	37 81       	ldd	r19, Z+7	; 0x07
 af8:	2f 5f       	subi	r18, 0xFF	; 255
 afa:	3f 4f       	sbci	r19, 0xFF	; 255
 afc:	37 83       	std	Z+7, r19	; 0x07
 afe:	26 83       	std	Z+6, r18	; 0x06
 b00:	14 c0       	rjmp	.+40     	; 0xb2a <fputc+0x6e>
 b02:	8b 01       	movw	r16, r22
 b04:	ec 01       	movw	r28, r24
 b06:	fb 01       	movw	r30, r22
 b08:	00 84       	ldd	r0, Z+8	; 0x08
 b0a:	f1 85       	ldd	r31, Z+9	; 0x09
 b0c:	e0 2d       	mov	r30, r0
 b0e:	09 95       	icall
 b10:	89 2b       	or	r24, r25
 b12:	e1 f6       	brne	.-72     	; 0xacc <fputc+0x10>
 b14:	d8 01       	movw	r26, r16
 b16:	16 96       	adiw	r26, 0x06	; 6
 b18:	8d 91       	ld	r24, X+
 b1a:	9c 91       	ld	r25, X
 b1c:	17 97       	sbiw	r26, 0x07	; 7
 b1e:	01 96       	adiw	r24, 0x01	; 1
 b20:	17 96       	adiw	r26, 0x07	; 7
 b22:	9c 93       	st	X, r25
 b24:	8e 93       	st	-X, r24
 b26:	16 97       	sbiw	r26, 0x06	; 6
 b28:	ce 01       	movw	r24, r28
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	1f 91       	pop	r17
 b30:	0f 91       	pop	r16
 b32:	08 95       	ret

00000b34 <__ultoa_invert>:
 b34:	fa 01       	movw	r30, r20
 b36:	aa 27       	eor	r26, r26
 b38:	28 30       	cpi	r18, 0x08	; 8
 b3a:	51 f1       	breq	.+84     	; 0xb90 <__ultoa_invert+0x5c>
 b3c:	20 31       	cpi	r18, 0x10	; 16
 b3e:	81 f1       	breq	.+96     	; 0xba0 <__ultoa_invert+0x6c>
 b40:	e8 94       	clt
 b42:	6f 93       	push	r22
 b44:	6e 7f       	andi	r22, 0xFE	; 254
 b46:	6e 5f       	subi	r22, 0xFE	; 254
 b48:	7f 4f       	sbci	r23, 0xFF	; 255
 b4a:	8f 4f       	sbci	r24, 0xFF	; 255
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	af 4f       	sbci	r26, 0xFF	; 255
 b50:	b1 e0       	ldi	r27, 0x01	; 1
 b52:	3e d0       	rcall	.+124    	; 0xbd0 <__ultoa_invert+0x9c>
 b54:	b4 e0       	ldi	r27, 0x04	; 4
 b56:	3c d0       	rcall	.+120    	; 0xbd0 <__ultoa_invert+0x9c>
 b58:	67 0f       	add	r22, r23
 b5a:	78 1f       	adc	r23, r24
 b5c:	89 1f       	adc	r24, r25
 b5e:	9a 1f       	adc	r25, r26
 b60:	a1 1d       	adc	r26, r1
 b62:	68 0f       	add	r22, r24
 b64:	79 1f       	adc	r23, r25
 b66:	8a 1f       	adc	r24, r26
 b68:	91 1d       	adc	r25, r1
 b6a:	a1 1d       	adc	r26, r1
 b6c:	6a 0f       	add	r22, r26
 b6e:	71 1d       	adc	r23, r1
 b70:	81 1d       	adc	r24, r1
 b72:	91 1d       	adc	r25, r1
 b74:	a1 1d       	adc	r26, r1
 b76:	20 d0       	rcall	.+64     	; 0xbb8 <__ultoa_invert+0x84>
 b78:	09 f4       	brne	.+2      	; 0xb7c <__ultoa_invert+0x48>
 b7a:	68 94       	set
 b7c:	3f 91       	pop	r19
 b7e:	2a e0       	ldi	r18, 0x0A	; 10
 b80:	26 9f       	mul	r18, r22
 b82:	11 24       	eor	r1, r1
 b84:	30 19       	sub	r19, r0
 b86:	30 5d       	subi	r19, 0xD0	; 208
 b88:	31 93       	st	Z+, r19
 b8a:	de f6       	brtc	.-74     	; 0xb42 <__ultoa_invert+0xe>
 b8c:	cf 01       	movw	r24, r30
 b8e:	08 95       	ret
 b90:	46 2f       	mov	r20, r22
 b92:	47 70       	andi	r20, 0x07	; 7
 b94:	40 5d       	subi	r20, 0xD0	; 208
 b96:	41 93       	st	Z+, r20
 b98:	b3 e0       	ldi	r27, 0x03	; 3
 b9a:	0f d0       	rcall	.+30     	; 0xbba <__ultoa_invert+0x86>
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__ultoa_invert+0x5c>
 b9e:	f6 cf       	rjmp	.-20     	; 0xb8c <__ultoa_invert+0x58>
 ba0:	46 2f       	mov	r20, r22
 ba2:	4f 70       	andi	r20, 0x0F	; 15
 ba4:	40 5d       	subi	r20, 0xD0	; 208
 ba6:	4a 33       	cpi	r20, 0x3A	; 58
 ba8:	18 f0       	brcs	.+6      	; 0xbb0 <__ultoa_invert+0x7c>
 baa:	49 5d       	subi	r20, 0xD9	; 217
 bac:	31 fd       	sbrc	r19, 1
 bae:	40 52       	subi	r20, 0x20	; 32
 bb0:	41 93       	st	Z+, r20
 bb2:	02 d0       	rcall	.+4      	; 0xbb8 <__ultoa_invert+0x84>
 bb4:	a9 f7       	brne	.-22     	; 0xba0 <__ultoa_invert+0x6c>
 bb6:	ea cf       	rjmp	.-44     	; 0xb8c <__ultoa_invert+0x58>
 bb8:	b4 e0       	ldi	r27, 0x04	; 4
 bba:	a6 95       	lsr	r26
 bbc:	97 95       	ror	r25
 bbe:	87 95       	ror	r24
 bc0:	77 95       	ror	r23
 bc2:	67 95       	ror	r22
 bc4:	ba 95       	dec	r27
 bc6:	c9 f7       	brne	.-14     	; 0xbba <__ultoa_invert+0x86>
 bc8:	00 97       	sbiw	r24, 0x00	; 0
 bca:	61 05       	cpc	r22, r1
 bcc:	71 05       	cpc	r23, r1
 bce:	08 95       	ret
 bd0:	9b 01       	movw	r18, r22
 bd2:	ac 01       	movw	r20, r24
 bd4:	0a 2e       	mov	r0, r26
 bd6:	06 94       	lsr	r0
 bd8:	57 95       	ror	r21
 bda:	47 95       	ror	r20
 bdc:	37 95       	ror	r19
 bde:	27 95       	ror	r18
 be0:	ba 95       	dec	r27
 be2:	c9 f7       	brne	.-14     	; 0xbd6 <__ultoa_invert+0xa2>
 be4:	62 0f       	add	r22, r18
 be6:	73 1f       	adc	r23, r19
 be8:	84 1f       	adc	r24, r20
 bea:	95 1f       	adc	r25, r21
 bec:	a0 1d       	adc	r26, r0
 bee:	08 95       	ret

00000bf0 <__divmodsi4>:
 bf0:	05 2e       	mov	r0, r21
 bf2:	97 fb       	bst	r25, 7
 bf4:	16 f4       	brtc	.+4      	; 0xbfa <__divmodsi4+0xa>
 bf6:	00 94       	com	r0
 bf8:	0f d0       	rcall	.+30     	; 0xc18 <__negsi2>
 bfa:	57 fd       	sbrc	r21, 7
 bfc:	05 d0       	rcall	.+10     	; 0xc08 <__divmodsi4_neg2>
 bfe:	24 d0       	rcall	.+72     	; 0xc48 <__udivmodsi4>
 c00:	07 fc       	sbrc	r0, 7
 c02:	02 d0       	rcall	.+4      	; 0xc08 <__divmodsi4_neg2>
 c04:	46 f4       	brtc	.+16     	; 0xc16 <__divmodsi4_exit>
 c06:	08 c0       	rjmp	.+16     	; 0xc18 <__negsi2>

00000c08 <__divmodsi4_neg2>:
 c08:	50 95       	com	r21
 c0a:	40 95       	com	r20
 c0c:	30 95       	com	r19
 c0e:	21 95       	neg	r18
 c10:	3f 4f       	sbci	r19, 0xFF	; 255
 c12:	4f 4f       	sbci	r20, 0xFF	; 255
 c14:	5f 4f       	sbci	r21, 0xFF	; 255

00000c16 <__divmodsi4_exit>:
 c16:	08 95       	ret

00000c18 <__negsi2>:
 c18:	90 95       	com	r25
 c1a:	80 95       	com	r24
 c1c:	70 95       	com	r23
 c1e:	61 95       	neg	r22
 c20:	7f 4f       	sbci	r23, 0xFF	; 255
 c22:	8f 4f       	sbci	r24, 0xFF	; 255
 c24:	9f 4f       	sbci	r25, 0xFF	; 255
 c26:	08 95       	ret

00000c28 <__muluhisi3>:
 c28:	31 d0       	rcall	.+98     	; 0xc8c <__umulhisi3>
 c2a:	a5 9f       	mul	r26, r21
 c2c:	90 0d       	add	r25, r0
 c2e:	b4 9f       	mul	r27, r20
 c30:	90 0d       	add	r25, r0
 c32:	a4 9f       	mul	r26, r20
 c34:	80 0d       	add	r24, r0
 c36:	91 1d       	adc	r25, r1
 c38:	11 24       	eor	r1, r1
 c3a:	08 95       	ret

00000c3c <__mulshisi3>:
 c3c:	b7 ff       	sbrs	r27, 7
 c3e:	f4 cf       	rjmp	.-24     	; 0xc28 <__muluhisi3>

00000c40 <__mulohisi3>:
 c40:	f3 df       	rcall	.-26     	; 0xc28 <__muluhisi3>
 c42:	82 1b       	sub	r24, r18
 c44:	93 0b       	sbc	r25, r19
 c46:	08 95       	ret

00000c48 <__udivmodsi4>:
 c48:	a1 e2       	ldi	r26, 0x21	; 33
 c4a:	1a 2e       	mov	r1, r26
 c4c:	aa 1b       	sub	r26, r26
 c4e:	bb 1b       	sub	r27, r27
 c50:	fd 01       	movw	r30, r26
 c52:	0d c0       	rjmp	.+26     	; 0xc6e <__udivmodsi4_ep>

00000c54 <__udivmodsi4_loop>:
 c54:	aa 1f       	adc	r26, r26
 c56:	bb 1f       	adc	r27, r27
 c58:	ee 1f       	adc	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	a2 17       	cp	r26, r18
 c5e:	b3 07       	cpc	r27, r19
 c60:	e4 07       	cpc	r30, r20
 c62:	f5 07       	cpc	r31, r21
 c64:	20 f0       	brcs	.+8      	; 0xc6e <__udivmodsi4_ep>
 c66:	a2 1b       	sub	r26, r18
 c68:	b3 0b       	sbc	r27, r19
 c6a:	e4 0b       	sbc	r30, r20
 c6c:	f5 0b       	sbc	r31, r21

00000c6e <__udivmodsi4_ep>:
 c6e:	66 1f       	adc	r22, r22
 c70:	77 1f       	adc	r23, r23
 c72:	88 1f       	adc	r24, r24
 c74:	99 1f       	adc	r25, r25
 c76:	1a 94       	dec	r1
 c78:	69 f7       	brne	.-38     	; 0xc54 <__udivmodsi4_loop>
 c7a:	60 95       	com	r22
 c7c:	70 95       	com	r23
 c7e:	80 95       	com	r24
 c80:	90 95       	com	r25
 c82:	9b 01       	movw	r18, r22
 c84:	ac 01       	movw	r20, r24
 c86:	bd 01       	movw	r22, r26
 c88:	cf 01       	movw	r24, r30
 c8a:	08 95       	ret

00000c8c <__umulhisi3>:
 c8c:	a2 9f       	mul	r26, r18
 c8e:	b0 01       	movw	r22, r0
 c90:	b3 9f       	mul	r27, r19
 c92:	c0 01       	movw	r24, r0
 c94:	a3 9f       	mul	r26, r19
 c96:	70 0d       	add	r23, r0
 c98:	81 1d       	adc	r24, r1
 c9a:	11 24       	eor	r1, r1
 c9c:	91 1d       	adc	r25, r1
 c9e:	b2 9f       	mul	r27, r18
 ca0:	70 0d       	add	r23, r0
 ca2:	81 1d       	adc	r24, r1
 ca4:	11 24       	eor	r1, r1
 ca6:	91 1d       	adc	r25, r1
 ca8:	08 95       	ret

00000caa <_exit>:
 caa:	f8 94       	cli

00000cac <__stop_program>:
 cac:	ff cf       	rjmp	.-2      	; 0xcac <__stop_program>
