
LcdAlarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00001714  000017a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001714  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  0080018a  0080018a  00001832  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018aa  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ec  00000000  00000000  0000320e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b3  00000000  00000000  00003bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000045b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bb  00000000  00000000  00004884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f8a  00000000  00000000  00004e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005dc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	fe c5       	rjmp	.+3068   	; 0xc02 <__vector_1>
       6:	00 00       	nop
       8:	8c c6       	rjmp	.+3352   	; 0xd22 <__vector_2>
       a:	00 00       	nop
       c:	1a c7       	rjmp	.+3636   	; 0xe42 <__vector_3>
       e:	00 00       	nop
      10:	ae c7       	rjmp	.+3932   	; 0xf6e <__vector_4>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e1       	ldi	r30, 0x14	; 20
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 38       	cpi	r26, 0x8A	; 138
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa e8       	ldi	r26, 0x8A	; 138
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 3e       	cpi	r26, 0xE3	; 227
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	fa d3       	rcall	.+2036   	; 0x8b8 <main>
      c4:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <gmtime>:
      ca:	61 ed       	ldi	r22, 0xD1	; 209
      cc:	71 e0       	ldi	r23, 0x01	; 1
      ce:	03 d0       	rcall	.+6      	; 0xd6 <gmtime_r>
      d0:	81 ed       	ldi	r24, 0xD1	; 209
      d2:	91 e0       	ldi	r25, 0x01	; 1
      d4:	08 95       	ret

000000d6 <gmtime_r>:
      d6:	cf 92       	push	r12
      d8:	df 92       	push	r13
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
      ea:	28 97       	sbiw	r28, 0x08	; 8
      ec:	0f b6       	in	r0, 0x3f	; 63
      ee:	f8 94       	cli
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	0f be       	out	0x3f, r0	; 63
      f4:	cd bf       	out	0x3d, r28	; 61
      f6:	8b 01       	movw	r16, r22
      f8:	fc 01       	movw	r30, r24
      fa:	60 81       	ld	r22, Z
      fc:	71 81       	ldd	r23, Z+1	; 0x01
      fe:	82 81       	ldd	r24, Z+2	; 0x02
     100:	93 81       	ldd	r25, Z+3	; 0x03
     102:	20 e8       	ldi	r18, 0x80	; 128
     104:	31 e5       	ldi	r19, 0x51	; 81
     106:	41 e0       	ldi	r20, 0x01	; 1
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__udivmodsi4>
     10e:	69 01       	movw	r12, r18
     110:	7a 01       	movw	r14, r20
     112:	2c e3       	ldi	r18, 0x3C	; 60
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	40 e0       	ldi	r20, 0x00	; 0
     118:	50 e0       	ldi	r21, 0x00	; 0
     11a:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     11e:	29 83       	std	Y+1, r18	; 0x01
     120:	3a 83       	std	Y+2, r19	; 0x02
     122:	4b 83       	std	Y+3, r20	; 0x03
     124:	5c 83       	std	Y+4, r21	; 0x04
     126:	89 81       	ldd	r24, Y+1	; 0x01
     128:	9a 81       	ldd	r25, Y+2	; 0x02
     12a:	ab 81       	ldd	r26, Y+3	; 0x03
     12c:	bc 81       	ldd	r27, Y+4	; 0x04
     12e:	f8 01       	movw	r30, r16
     130:	60 83       	st	Z, r22
     132:	6c e3       	ldi	r22, 0x3C	; 60
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	7e d7       	rcall	.+3836   	; 0x1034 <__divmodhi4>
     138:	dc 01       	movw	r26, r24
     13a:	cb 01       	movw	r24, r22
     13c:	f8 01       	movw	r30, r16
     13e:	a1 83       	std	Z+1, r26	; 0x01
     140:	82 83       	std	Z+2, r24	; 0x02
     142:	c6 01       	movw	r24, r12
     144:	06 96       	adiw	r24, 0x06	; 6
     146:	67 e0       	ldi	r22, 0x07	; 7
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	87 d7       	rcall	.+3854   	; 0x105a <__udivmodhi4>
     14c:	84 83       	std	Z+4, r24	; 0x04
     14e:	2d ea       	ldi	r18, 0xAD	; 173
     150:	3e e8       	ldi	r19, 0x8E	; 142
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	c7 01       	movw	r24, r14
     158:	b6 01       	movw	r22, r12
     15a:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     15e:	29 83       	std	Y+1, r18	; 0x01
     160:	3a 83       	std	Y+2, r19	; 0x02
     162:	6d 83       	std	Y+5, r22	; 0x05
     164:	7e 83       	std	Y+6, r23	; 0x06
     166:	8f 83       	std	Y+7, r24	; 0x07
     168:	98 87       	std	Y+8, r25	; 0x08
     16a:	89 81       	ldd	r24, Y+1	; 0x01
     16c:	9a 81       	ldd	r25, Y+2	; 0x02
     16e:	24 e6       	ldi	r18, 0x64	; 100
     170:	28 9f       	mul	r18, r24
     172:	60 01       	movw	r12, r0
     174:	29 9f       	mul	r18, r25
     176:	d0 0c       	add	r13, r0
     178:	11 24       	eor	r1, r1
     17a:	6d 81       	ldd	r22, Y+5	; 0x05
     17c:	7e 81       	ldd	r23, Y+6	; 0x06
     17e:	8f 81       	ldd	r24, Y+7	; 0x07
     180:	98 85       	ldd	r25, Y+8	; 0x08
     182:	25 eb       	ldi	r18, 0xB5	; 181
     184:	35 e0       	ldi	r19, 0x05	; 5
     186:	40 e0       	ldi	r20, 0x00	; 0
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	0e 94 4d 0b 	call	0x169a	; 0x169a <__divmodsi4>
     18e:	29 83       	std	Y+1, r18	; 0x01
     190:	3a 83       	std	Y+2, r19	; 0x02
     192:	6d 83       	std	Y+5, r22	; 0x05
     194:	7e 83       	std	Y+6, r23	; 0x06
     196:	e9 80       	ldd	r14, Y+1	; 0x01
     198:	fa 80       	ldd	r15, Y+2	; 0x02
     19a:	ee 0c       	add	r14, r14
     19c:	ff 1c       	adc	r15, r15
     19e:	ee 0c       	add	r14, r14
     1a0:	ff 1c       	adc	r15, r15
     1a2:	ec 0c       	add	r14, r12
     1a4:	fd 1c       	adc	r15, r13
     1a6:	8d 81       	ldd	r24, Y+5	; 0x05
     1a8:	9e 81       	ldd	r25, Y+6	; 0x06
     1aa:	f5 e6       	ldi	r31, 0x65	; 101
     1ac:	ef 16       	cp	r14, r31
     1ae:	f1 04       	cpc	r15, r1
     1b0:	10 f0       	brcs	.+4      	; 0x1b6 <gmtime_r+0xe0>
     1b2:	01 96       	adiw	r24, 0x01	; 1
     1b4:	04 c0       	rjmp	.+8      	; 0x1be <gmtime_r+0xe8>
     1b6:	24 e6       	ldi	r18, 0x64	; 100
     1b8:	e2 16       	cp	r14, r18
     1ba:	f1 04       	cpc	r15, r1
     1bc:	19 f0       	breq	.+6      	; 0x1c4 <gmtime_r+0xee>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <gmtime_r+0xf2>
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	a9 01       	movw	r20, r18
     1ca:	44 59       	subi	r20, 0x94	; 148
     1cc:	5e 4f       	sbci	r21, 0xFE	; 254
     1ce:	48 17       	cp	r20, r24
     1d0:	59 07       	cpc	r21, r25
     1d2:	60 f4       	brcc	.+24     	; 0x1ec <gmtime_r+0x116>
     1d4:	6d e6       	ldi	r22, 0x6D	; 109
     1d6:	71 e0       	ldi	r23, 0x01	; 1
     1d8:	82 1b       	sub	r24, r18
     1da:	93 0b       	sbc	r25, r19
     1dc:	2b d7       	rcall	.+3670   	; 0x1034 <__divmodhi4>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	e8 0e       	add	r14, r24
     1e4:	f9 1e       	adc	r15, r25
     1e6:	cd 01       	movw	r24, r26
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	44 e6       	ldi	r20, 0x64	; 100
     1ee:	e4 0e       	add	r14, r20
     1f0:	f1 1c       	adc	r15, r1
     1f2:	f8 01       	movw	r30, r16
     1f4:	f7 82       	std	Z+7, r15	; 0x07
     1f6:	e6 82       	std	Z+6, r14	; 0x06
     1f8:	91 87       	std	Z+9, r25	; 0x09
     1fa:	80 87       	std	Z+8, r24	; 0x08
     1fc:	25 5c       	subi	r18, 0xC5	; 197
     1fe:	3f 4f       	sbci	r19, 0xFF	; 255
     200:	82 17       	cp	r24, r18
     202:	93 07       	cpc	r25, r19
     204:	40 f4       	brcc	.+16     	; 0x216 <gmtime_r+0x140>
     206:	6f e1       	ldi	r22, 0x1F	; 31
     208:	70 e0       	ldi	r23, 0x00	; 0
     20a:	14 d7       	rcall	.+3624   	; 0x1034 <__divmodhi4>
     20c:	dc 01       	movw	r26, r24
     20e:	cb 01       	movw	r24, r22
     210:	f8 01       	movw	r30, r16
     212:	85 83       	std	Z+5, r24	; 0x05
     214:	1f c0       	rjmp	.+62     	; 0x254 <gmtime_r+0x17e>
     216:	69 e9       	ldi	r22, 0x99	; 153
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	82 1b       	sub	r24, r18
     21c:	93 0b       	sbc	r25, r19
     21e:	0a d7       	rcall	.+3604   	; 0x1034 <__divmodhi4>
     220:	dc 01       	movw	r26, r24
     222:	cb 01       	movw	r24, r22
     224:	f8 2e       	mov	r15, r24
     226:	ff 0c       	add	r15, r15
     228:	ff 0c       	add	r15, r15
     22a:	f8 0e       	add	r15, r24
     22c:	6d e3       	ldi	r22, 0x3D	; 61
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	cd 01       	movw	r24, r26
     232:	00 d7       	rcall	.+3584   	; 0x1034 <__divmodhi4>
     234:	dc 01       	movw	r26, r24
     236:	cb 01       	movw	r24, r22
     238:	e8 2e       	mov	r14, r24
     23a:	ee 0c       	add	r14, r14
     23c:	6f e1       	ldi	r22, 0x1F	; 31
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	cd 01       	movw	r24, r26
     242:	f8 d6       	rcall	.+3568   	; 0x1034 <__divmodhi4>
     244:	dc 01       	movw	r26, r24
     246:	cb 01       	movw	r24, r22
     248:	22 e0       	ldi	r18, 0x02	; 2
     24a:	28 0f       	add	r18, r24
     24c:	f2 0e       	add	r15, r18
     24e:	fe 0c       	add	r15, r14
     250:	f8 01       	movw	r30, r16
     252:	f5 82       	std	Z+5, r15	; 0x05
     254:	a3 83       	std	Z+3, r26	; 0x03
     256:	f8 01       	movw	r30, r16
     258:	13 86       	std	Z+11, r1	; 0x0b
     25a:	12 86       	std	Z+10, r1	; 0x0a
     25c:	83 81       	ldd	r24, Z+3	; 0x03
     25e:	8f 5f       	subi	r24, 0xFF	; 255
     260:	83 83       	std	Z+3, r24	; 0x03
     262:	28 96       	adiw	r28, 0x08	; 8
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	ff 90       	pop	r15
     278:	ef 90       	pop	r14
     27a:	df 90       	pop	r13
     27c:	cf 90       	pop	r12
     27e:	08 95       	ret

00000280 <mktime>:
     280:	cf 92       	push	r12
     282:	df 92       	push	r13
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	df 93       	push	r29
     290:	00 d0       	rcall	.+0      	; 0x292 <mktime+0x12>
     292:	00 d0       	rcall	.+0      	; 0x294 <mktime+0x14>
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	8c 01       	movw	r16, r24
     29a:	a8 d0       	rcall	.+336    	; 0x3ec <mk_gmtime>
     29c:	69 83       	std	Y+1, r22	; 0x01
     29e:	7a 83       	std	Y+2, r23	; 0x02
     2a0:	8b 83       	std	Y+3, r24	; 0x03
     2a2:	9c 83       	std	Y+4, r25	; 0x04
     2a4:	f8 01       	movw	r30, r16
     2a6:	82 85       	ldd	r24, Z+10	; 0x0a
     2a8:	93 85       	ldd	r25, Z+11	; 0x0b
     2aa:	97 ff       	sbrs	r25, 7
     2ac:	0e c0       	rjmp	.+28     	; 0x2ca <mktime+0x4a>
     2ae:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <__dst_ptr>
     2b2:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <__dst_ptr+0x1>
     2b6:	30 97       	sbiw	r30, 0x00	; 0
     2b8:	41 f0       	breq	.+16     	; 0x2ca <mktime+0x4a>
     2ba:	6d ed       	ldi	r22, 0xDD	; 221
     2bc:	71 e0       	ldi	r23, 0x01	; 1
     2be:	ce 01       	movw	r24, r28
     2c0:	01 96       	adiw	r24, 0x01	; 1
     2c2:	09 95       	icall
     2c4:	f8 01       	movw	r30, r16
     2c6:	93 87       	std	Z+11, r25	; 0x0b
     2c8:	82 87       	std	Z+10, r24	; 0x0a
     2ca:	f8 01       	movw	r30, r16
     2cc:	82 85       	ldd	r24, Z+10	; 0x0a
     2ce:	93 85       	ldd	r25, Z+11	; 0x0b
     2d0:	18 16       	cp	r1, r24
     2d2:	19 06       	cpc	r1, r25
     2d4:	94 f4       	brge	.+36     	; 0x2fa <mktime+0x7a>
     2d6:	09 2e       	mov	r0, r25
     2d8:	00 0c       	add	r0, r0
     2da:	aa 0b       	sbc	r26, r26
     2dc:	bb 0b       	sbc	r27, r27
     2de:	49 81       	ldd	r20, Y+1	; 0x01
     2e0:	5a 81       	ldd	r21, Y+2	; 0x02
     2e2:	6b 81       	ldd	r22, Y+3	; 0x03
     2e4:	7c 81       	ldd	r23, Y+4	; 0x04
     2e6:	6a 01       	movw	r12, r20
     2e8:	7b 01       	movw	r14, r22
     2ea:	c8 1a       	sub	r12, r24
     2ec:	d9 0a       	sbc	r13, r25
     2ee:	ea 0a       	sbc	r14, r26
     2f0:	fb 0a       	sbc	r15, r27
     2f2:	c9 82       	std	Y+1, r12	; 0x01
     2f4:	da 82       	std	Y+2, r13	; 0x02
     2f6:	eb 82       	std	Y+3, r14	; 0x03
     2f8:	fc 82       	std	Y+4, r15	; 0x04
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	ab 81       	ldd	r26, Y+3	; 0x03
     300:	bc 81       	ldd	r27, Y+4	; 0x04
     302:	40 91 dd 01 	lds	r20, 0x01DD	; 0x8001dd <__utc_offset>
     306:	50 91 de 01 	lds	r21, 0x01DE	; 0x8001de <__utc_offset+0x1>
     30a:	60 91 df 01 	lds	r22, 0x01DF	; 0x8001df <__utc_offset+0x2>
     30e:	70 91 e0 01 	lds	r23, 0x01E0	; 0x8001e0 <__utc_offset+0x3>
     312:	84 1b       	sub	r24, r20
     314:	95 0b       	sbc	r25, r21
     316:	a6 0b       	sbc	r26, r22
     318:	b7 0b       	sbc	r27, r23
     31a:	89 83       	std	Y+1, r24	; 0x01
     31c:	9a 83       	std	Y+2, r25	; 0x02
     31e:	ab 83       	std	Y+3, r26	; 0x03
     320:	bc 83       	std	Y+4, r27	; 0x04
     322:	b8 01       	movw	r22, r16
     324:	ce 01       	movw	r24, r28
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	11 d0       	rcall	.+34     	; 0x34c <localtime_r>
     32a:	69 81       	ldd	r22, Y+1	; 0x01
     32c:	7a 81       	ldd	r23, Y+2	; 0x02
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	9c 81       	ldd	r25, Y+4	; 0x04
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	ff 90       	pop	r15
     344:	ef 90       	pop	r14
     346:	df 90       	pop	r13
     348:	cf 90       	pop	r12
     34a:	08 95       	ret

0000034c <localtime_r>:
     34c:	cf 92       	push	r12
     34e:	df 92       	push	r13
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	00 d0       	rcall	.+0      	; 0x35e <localtime_r+0x12>
     35e:	00 d0       	rcall	.+0      	; 0x360 <localtime_r+0x14>
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	6c 01       	movw	r12, r24
     366:	7b 01       	movw	r14, r22
     368:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <__dst_ptr>
     36c:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <__dst_ptr+0x1>
     370:	30 97       	sbiw	r30, 0x00	; 0
     372:	29 f0       	breq	.+10     	; 0x37e <localtime_r+0x32>
     374:	6d ed       	ldi	r22, 0xDD	; 221
     376:	71 e0       	ldi	r23, 0x01	; 1
     378:	09 95       	icall
     37a:	8c 01       	movw	r16, r24
     37c:	02 c0       	rjmp	.+4      	; 0x382 <localtime_r+0x36>
     37e:	0f ef       	ldi	r16, 0xFF	; 255
     380:	1f ef       	ldi	r17, 0xFF	; 255
     382:	f6 01       	movw	r30, r12
     384:	40 81       	ld	r20, Z
     386:	51 81       	ldd	r21, Z+1	; 0x01
     388:	62 81       	ldd	r22, Z+2	; 0x02
     38a:	73 81       	ldd	r23, Z+3	; 0x03
     38c:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <__utc_offset>
     390:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <__utc_offset+0x1>
     394:	a0 91 df 01 	lds	r26, 0x01DF	; 0x8001df <__utc_offset+0x2>
     398:	b0 91 e0 01 	lds	r27, 0x01E0	; 0x8001e0 <__utc_offset+0x3>
     39c:	84 0f       	add	r24, r20
     39e:	95 1f       	adc	r25, r21
     3a0:	a6 1f       	adc	r26, r22
     3a2:	b7 1f       	adc	r27, r23
     3a4:	10 16       	cp	r1, r16
     3a6:	11 06       	cpc	r1, r17
     3a8:	4c f4       	brge	.+18     	; 0x3bc <localtime_r+0x70>
     3aa:	a8 01       	movw	r20, r16
     3ac:	01 2e       	mov	r0, r17
     3ae:	00 0c       	add	r0, r0
     3b0:	66 0b       	sbc	r22, r22
     3b2:	77 0b       	sbc	r23, r23
     3b4:	84 0f       	add	r24, r20
     3b6:	95 1f       	adc	r25, r21
     3b8:	a6 1f       	adc	r26, r22
     3ba:	b7 1f       	adc	r27, r23
     3bc:	89 83       	std	Y+1, r24	; 0x01
     3be:	9a 83       	std	Y+2, r25	; 0x02
     3c0:	ab 83       	std	Y+3, r26	; 0x03
     3c2:	bc 83       	std	Y+4, r27	; 0x04
     3c4:	b7 01       	movw	r22, r14
     3c6:	ce 01       	movw	r24, r28
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	85 de       	rcall	.-758    	; 0xd6 <gmtime_r>
     3cc:	f7 01       	movw	r30, r14
     3ce:	13 87       	std	Z+11, r17	; 0x0b
     3d0:	02 87       	std	Z+10, r16	; 0x0a
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	08 95       	ret

000003ec <mk_gmtime>:
     3ec:	8f 92       	push	r8
     3ee:	9f 92       	push	r9
     3f0:	af 92       	push	r10
     3f2:	bf 92       	push	r11
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	ec 01       	movw	r28, r24
     406:	ee 81       	ldd	r30, Y+6	; 0x06
     408:	ff 81       	ldd	r31, Y+7	; 0x07
     40a:	8f 01       	movw	r16, r30
     40c:	04 56       	subi	r16, 0x64	; 100
     40e:	11 09       	sbc	r17, r1
     410:	b1 f0       	breq	.+44     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     412:	cf 01       	movw	r24, r30
     414:	85 56       	subi	r24, 0x65	; 101
     416:	91 09       	sbc	r25, r1
     418:	6c 01       	movw	r12, r24
     41a:	97 ff       	sbrs	r25, 7
     41c:	03 c0       	rjmp	.+6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41e:	23 e0       	ldi	r18, 0x03	; 3
     420:	c2 0e       	add	r12, r18
     422:	d1 1c       	adc	r13, r1
     424:	d5 94       	asr	r13
     426:	c7 94       	ror	r12
     428:	d5 94       	asr	r13
     42a:	c7 94       	ror	r12
     42c:	6c e9       	ldi	r22, 0x9C	; 156
     42e:	7f ef       	ldi	r23, 0xFF	; 255
     430:	01 d6       	rcall	.+3074   	; 0x1034 <__divmodhi4>
     432:	c6 0e       	add	r12, r22
     434:	d7 1e       	adc	r13, r23
     436:	8f ef       	ldi	r24, 0xFF	; 255
     438:	c8 1a       	sub	r12, r24
     43a:	d8 0a       	sbc	r13, r24
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43e:	c1 2c       	mov	r12, r1
     440:	d1 2c       	mov	r13, r1
     442:	2d e6       	ldi	r18, 0x6D	; 109
     444:	31 e0       	ldi	r19, 0x01	; 1
     446:	d8 01       	movw	r26, r16
     448:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__usmulhisi3>
     44c:	0d 2c       	mov	r0, r13
     44e:	00 0c       	add	r0, r0
     450:	ee 08       	sbc	r14, r14
     452:	ff 08       	sbc	r15, r15
     454:	c6 0e       	add	r12, r22
     456:	d7 1e       	adc	r13, r23
     458:	e8 1e       	adc	r14, r24
     45a:	f9 1e       	adc	r15, r25
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	08 2e       	mov	r0, r24
     460:	00 0c       	add	r0, r0
     462:	99 0b       	sbc	r25, r25
     464:	8c 01       	movw	r16, r24
     466:	01 50       	subi	r16, 0x01	; 1
     468:	11 09       	sbc	r17, r1
     46a:	2d 81       	ldd	r18, Y+5	; 0x05
     46c:	22 30       	cpi	r18, 0x02	; 2
     46e:	2c f4       	brge	.+10     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     470:	22 23       	and	r18, r18
     472:	69 f1       	breq	.+90     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     474:	01 5e       	subi	r16, 0xE1	; 225
     476:	1f 4f       	sbci	r17, 0xFF	; 255
     478:	2a c0       	rjmp	.+84     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     47a:	cf 01       	movw	r24, r30
     47c:	84 59       	subi	r24, 0x94	; 148
     47e:	98 4f       	sbci	r25, 0xF8	; 248
     480:	6b d0       	rcall	.+214    	; 0x558 <is_leap_year>
     482:	28 2f       	mov	r18, r24
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	25 5c       	subi	r18, 0xC5	; 197
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	20 0f       	add	r18, r16
     48c:	31 1f       	adc	r19, r17
     48e:	8d 81       	ldd	r24, Y+5	; 0x05
     490:	08 2e       	mov	r0, r24
     492:	00 0c       	add	r0, r0
     494:	99 0b       	sbc	r25, r25
     496:	02 97       	sbiw	r24, 0x02	; 2
     498:	85 30       	cpi	r24, 0x05	; 5
     49a:	91 05       	cpc	r25, r1
     49c:	14 f0       	brlt	.+4      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     49e:	27 56       	subi	r18, 0x67	; 103
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	65 e0       	ldi	r22, 0x05	; 5
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	c6 d5       	rcall	.+2956   	; 0x1034 <__divmodhi4>
     4a8:	ac 01       	movw	r20, r24
     4aa:	97 ff       	sbrs	r25, 7
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ae:	4f 5f       	subi	r20, 0xFF	; 255
     4b0:	5f 4f       	sbci	r21, 0xFF	; 255
     4b2:	55 95       	asr	r21
     4b4:	47 95       	ror	r20
     4b6:	9d e3       	ldi	r25, 0x3D	; 61
     4b8:	94 9f       	mul	r25, r20
     4ba:	80 01       	movw	r16, r0
     4bc:	95 9f       	mul	r25, r21
     4be:	10 0d       	add	r17, r0
     4c0:	11 24       	eor	r1, r1
     4c2:	02 0f       	add	r16, r18
     4c4:	13 1f       	adc	r17, r19
     4c6:	80 ff       	sbrs	r24, 0
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4ca:	01 5e       	subi	r16, 0xE1	; 225
     4cc:	1f 4f       	sbci	r17, 0xFF	; 255
     4ce:	c8 01       	movw	r24, r16
     4d0:	11 0f       	add	r17, r17
     4d2:	aa 0b       	sbc	r26, r26
     4d4:	bb 0b       	sbc	r27, r27
     4d6:	9c 01       	movw	r18, r24
     4d8:	ad 01       	movw	r20, r26
     4da:	2c 0d       	add	r18, r12
     4dc:	3d 1d       	adc	r19, r13
     4de:	4e 1d       	adc	r20, r14
     4e0:	5f 1d       	adc	r21, r15
     4e2:	60 e8       	ldi	r22, 0x80	; 128
     4e4:	71 e5       	ldi	r23, 0x51	; 81
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__mulsi3>
     4ee:	4b 01       	movw	r8, r22
     4f0:	5c 01       	movw	r10, r24
     4f2:	aa 81       	ldd	r26, Y+2	; 0x02
     4f4:	0a 2e       	mov	r0, r26
     4f6:	00 0c       	add	r0, r0
     4f8:	bb 0b       	sbc	r27, r27
     4fa:	20 e1       	ldi	r18, 0x10	; 16
     4fc:	3e e0       	ldi	r19, 0x0E	; 14
     4fe:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__usmulhisi3>
     502:	6b 01       	movw	r12, r22
     504:	7c 01       	movw	r14, r24
     506:	a9 81       	ldd	r26, Y+1	; 0x01
     508:	0a 2e       	mov	r0, r26
     50a:	00 0c       	add	r0, r0
     50c:	bb 0b       	sbc	r27, r27
     50e:	2c e3       	ldi	r18, 0x3C	; 60
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__usmulhisi3>
     516:	c6 0e       	add	r12, r22
     518:	d7 1e       	adc	r13, r23
     51a:	e8 1e       	adc	r14, r24
     51c:	f9 1e       	adc	r15, r25
     51e:	68 81       	ld	r22, Y
     520:	86 2f       	mov	r24, r22
     522:	66 0f       	add	r22, r22
     524:	99 0b       	sbc	r25, r25
     526:	aa 0b       	sbc	r26, r26
     528:	bb 0b       	sbc	r27, r27
     52a:	8c 0d       	add	r24, r12
     52c:	9d 1d       	adc	r25, r13
     52e:	ae 1d       	adc	r26, r14
     530:	bf 1d       	adc	r27, r15
     532:	bc 01       	movw	r22, r24
     534:	cd 01       	movw	r24, r26
     536:	68 0d       	add	r22, r8
     538:	79 1d       	adc	r23, r9
     53a:	8a 1d       	adc	r24, r10
     53c:	9b 1d       	adc	r25, r11
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	ff 90       	pop	r15
     548:	ef 90       	pop	r14
     54a:	df 90       	pop	r13
     54c:	cf 90       	pop	r12
     54e:	bf 90       	pop	r11
     550:	af 90       	pop	r10
     552:	9f 90       	pop	r9
     554:	8f 90       	pop	r8
     556:	08 95       	ret

00000558 <is_leap_year>:
     558:	9c 01       	movw	r18, r24
     55a:	23 70       	andi	r18, 0x03	; 3
     55c:	33 27       	eor	r19, r19
     55e:	23 2b       	or	r18, r19
     560:	51 f4       	brne	.+20     	; 0x576 <is_leap_year+0x1e>
     562:	64 e6       	ldi	r22, 0x64	; 100
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	66 d5       	rcall	.+2764   	; 0x1034 <__divmodhi4>
     568:	89 2b       	or	r24, r25
     56a:	39 f4       	brne	.+14     	; 0x57a <is_leap_year+0x22>
     56c:	63 70       	andi	r22, 0x03	; 3
     56e:	77 27       	eor	r23, r23
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	67 2b       	or	r22, r23
     574:	19 f0       	breq	.+6      	; 0x57c <is_leap_year+0x24>
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	08 95       	ret
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	08 95       	ret

0000057e <LCD_rCommand>:

// 텍스트 LCD의 비지 플래그 상태를 확인하는 함수
char LCD_BusyCheck(unsigned char temp)
{
	return temp & 0x80;
}
     57e:	1a ba       	out	0x1a, r1	; 26
     580:	a8 98       	cbi	0x15, 0	; 21
     582:	a9 9a       	sbi	0x15, 1	; 21
     584:	aa 9a       	sbi	0x15, 2	; 21
     586:	85 e0       	ldi	r24, 0x05	; 5
     588:	8a 95       	dec	r24
     58a:	f1 f7       	brne	.-4      	; 0x588 <LCD_rCommand+0xa>
     58c:	00 00       	nop
     58e:	89 b3       	in	r24, 0x19	; 25
     590:	95 e0       	ldi	r25, 0x05	; 5
     592:	9a 95       	dec	r25
     594:	f1 f7       	brne	.-4      	; 0x592 <LCD_rCommand+0x14>
     596:	00 00       	nop
     598:	aa 98       	cbi	0x15, 2	; 21
     59a:	9f ef       	ldi	r25, 0xFF	; 255
     59c:	9a bb       	out	0x1a, r25	; 26
     59e:	95 e0       	ldi	r25, 0x05	; 5
     5a0:	9a 95       	dec	r25
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <LCD_rCommand+0x22>
     5a4:	00 00       	nop
     5a6:	08 95       	ret

000005a8 <LCD_wCommand>:

// 텍스트 LCD에 명령을 출력하는 함수 - 단, 비지플래그 체크하지 않음
void LCD_wCommand(char cmd)
{
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
     5a8:	a8 98       	cbi	0x15, 0	; 21
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
     5aa:	a9 98       	cbi	0x15, 1	; 21
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1	
     5ac:	aa 9a       	sbi	0x15, 2	; 21
	LCD_DATA = cmd;          // 명령 출력
     5ae:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b0:	85 e0       	ldi	r24, 0x05	; 5
     5b2:	8a 95       	dec	r24
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <LCD_wCommand+0xa>
     5b6:	00 00       	nop
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝
     5b8:	aa 98       	cbi	0x15, 2	; 21
     5ba:	85 e0       	ldi	r24, 0x05	; 5
     5bc:	8a 95       	dec	r24
     5be:	f1 f7       	brne	.-4      	; 0x5bc <LCD_wCommand+0x14>
     5c0:	00 00       	nop
     5c2:	08 95       	ret

000005c4 <LCD_wBCommand>:
	_delay_us(1);
}

// 텍스트 LCD에 명령을 출력하는 함수 - 단, 비지플래그 체크함
void LCD_wBCommand(char cmd)
{
     5c4:	cf 93       	push	r28
     5c6:	c8 2f       	mov	r28, r24
	while(LCD_BusyCheck(LCD_rCommand()))
     5c8:	04 c0       	rjmp	.+8      	; 0x5d2 <LCD_wBCommand+0xe>
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	8a 95       	dec	r24
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <LCD_wBCommand+0x8>
     5d0:	00 00       	nop
     5d2:	d5 df       	rcall	.-86     	; 0x57e <LCD_rCommand>
     5d4:	88 23       	and	r24, r24
     5d6:	cc f3       	brlt	.-14     	; 0x5ca <LCD_wBCommand+0x6>
	_delay_us(1);
	cbi(LCD_CON, LCD_RS); // 0번 비트 클리어, RS = 0, 명령
     5d8:	a8 98       	cbi	0x15, 0	; 21
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
     5da:	a9 98       	cbi	0x15, 1	; 21
	sbi(LCD_CON, LCD_E);  // 2번 비트 설정, E = 1
     5dc:	aa 9a       	sbi	0x15, 2	; 21
	
	LCD_DATA = cmd;          // 명령 출력
     5de:	cb bb       	out	0x1b, r28	; 27
     5e0:	85 e0       	ldi	r24, 0x05	; 5
     5e2:	8a 95       	dec	r24
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <LCD_wBCommand+0x1e>
     5e6:	00 00       	nop
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 명령 쓰기 동작 끝
     5e8:	aa 98       	cbi	0x15, 2	; 21
     5ea:	85 e0       	ldi	r24, 0x05	; 5
     5ec:	8a 95       	dec	r24
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <LCD_wBCommand+0x28>
     5f0:	00 00       	nop
	_delay_us(1);
}
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <LCD_Cursor>:

void LCD_Cursor(char col, char row)
{
	LCD_wBCommand(0x80 | (row + col * 0x40));
     5f6:	90 e4       	ldi	r25, 0x40	; 64
     5f8:	89 9f       	mul	r24, r25
     5fa:	60 0d       	add	r22, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	86 2f       	mov	r24, r22
     600:	80 68       	ori	r24, 0x80	; 128
     602:	e0 cf       	rjmp	.-64     	; 0x5c4 <LCD_wBCommand>
     604:	08 95       	ret

00000606 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     606:	2f ef       	ldi	r18, 0xFF	; 255
     608:	81 ee       	ldi	r24, 0xE1	; 225
     60a:	94 e0       	ldi	r25, 0x04	; 4
     60c:	21 50       	subi	r18, 0x01	; 1
     60e:	80 40       	sbci	r24, 0x00	; 0
     610:	90 40       	sbci	r25, 0x00	; 0
     612:	e1 f7       	brne	.-8      	; 0x60c <LCD_Init+0x6>
     614:	00 c0       	rjmp	.+0      	; 0x616 <LCD_Init+0x10>
     616:	00 00       	nop
// 텍스트 LCD를 초기화하는 함수
void LCD_Init(void)
{
	_delay_ms(100);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
     618:	88 e3       	ldi	r24, 0x38	; 56
     61a:	c6 df       	rcall	.-116    	; 0x5a8 <LCD_wCommand>
     61c:	8f e3       	ldi	r24, 0x3F	; 63
     61e:	9c e9       	ldi	r25, 0x9C	; 156
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <LCD_Init+0x1a>
     624:	00 c0       	rjmp	.+0      	; 0x626 <LCD_Init+0x20>
     626:	00 00       	nop
	_delay_ms(10);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
     628:	88 e3       	ldi	r24, 0x38	; 56
     62a:	be df       	rcall	.-132    	; 0x5a8 <LCD_wCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     62c:	8f e1       	ldi	r24, 0x1F	; 31
     62e:	93 e0       	ldi	r25, 0x03	; 3
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <LCD_Init+0x2a>
     634:	00 c0       	rjmp	.+0      	; 0x636 <LCD_Init+0x30>
	_delay_us(200);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
     636:	00 00       	nop
     638:	88 e3       	ldi	r24, 0x38	; 56
     63a:	b6 df       	rcall	.-148    	; 0x5a8 <LCD_wCommand>
     63c:	8f e1       	ldi	r24, 0x1F	; 31
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	f1 f7       	brne	.-4      	; 0x640 <LCD_Init+0x3a>
     644:	00 c0       	rjmp	.+0      	; 0x646 <LCD_Init+0x40>
	_delay_us(200);
	
	// 비지 플래그를 체크하는 Function Set
	LCD_wBCommand(0x38);
     646:	00 00       	nop
     648:	88 e3       	ldi	r24, 0x38	; 56
	// 비지 플래그를 체크하는 Display On/Off Control
	LCD_wBCommand(0x0c);
     64a:	bc df       	rcall	.-136    	; 0x5c4 <LCD_wBCommand>
     64c:	8c e0       	ldi	r24, 0x0C	; 12
     64e:	ba df       	rcall	.-140    	; 0x5c4 <LCD_wBCommand>
	// 비지 플래그를 체크하는 Clear Display
	LCD_wBCommand(0x01);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	b8 cf       	rjmp	.-144    	; 0x5c4 <LCD_wBCommand>
     654:	08 95       	ret

00000656 <LCD_wData>:
     656:	cf 93       	push	r28
}

void LCD_wData(char dat)
{
     658:	c8 2f       	mov	r28, r24
	while(LCD_BusyCheck(LCD_rCommand()))
     65a:	04 c0       	rjmp	.+8      	; 0x664 <LCD_wData+0xe>
     65c:	85 e0       	ldi	r24, 0x05	; 5
     65e:	8a 95       	dec	r24
     660:	f1 f7       	brne	.-4      	; 0x65e <LCD_wData+0x8>
     662:	00 00       	nop
     664:	8c df       	rcall	.-232    	; 0x57e <LCD_rCommand>
     666:	88 23       	and	r24, r24
     668:	cc f3       	brlt	.-14     	; 0x65c <LCD_wData+0x6>
	{
		_delay_us(1);	
	}
	sbi(LCD_CON, LCD_RS);
     66a:	a8 9a       	sbi	0x15, 0	; 21
	cbi(LCD_CON, LCD_RW);
     66c:	a9 98       	cbi	0x15, 1	; 21
	sbi(LCD_CON, LCD_E);
     66e:	aa 9a       	sbi	0x15, 2	; 21
	LCD_DATA = dat;
     670:	cb bb       	out	0x1b, r28	; 27
     672:	85 e0       	ldi	r24, 0x05	; 5
     674:	8a 95       	dec	r24
     676:	f1 f7       	brne	.-4      	; 0x674 <LCD_wData+0x1e>
     678:	00 00       	nop
	_delay_us(1);
	cbi(LCD_CON, LCD_E);
     67a:	aa 98       	cbi	0x15, 2	; 21
     67c:	85 e0       	ldi	r24, 0x05	; 5
     67e:	8a 95       	dec	r24
     680:	f1 f7       	brne	.-4      	; 0x67e <LCD_wData+0x28>
     682:	00 00       	nop
	_delay_us(1);
}
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <LCD_wString>:

void LCD_wString(char *str)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
	while(*str)
     68e:	88 81       	ld	r24, Y
     690:	88 23       	and	r24, r24
     692:	29 f0       	breq	.+10     	; 0x69e <LCD_wString+0x16>
     694:	21 96       	adiw	r28, 0x01	; 1
		LCD_wData(*str++);
     696:	df df       	rcall	.-66     	; 0x656 <LCD_wData>
	_delay_us(1);
}

void LCD_wString(char *str)
{
	while(*str)
     698:	89 91       	ld	r24, Y+
     69a:	81 11       	cpse	r24, r1
     69c:	fc cf       	rjmp	.-8      	; 0x696 <LCD_wString+0xe>
		LCD_wData(*str++);
}
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <print_lcd>:
int isAlarmOn = 0;
int isAlarmSetting= 0;
int al_hour, al_min;

void print_lcd()
{
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
	LCD_wBCommand(0x80 | 0x00);
     6a8:	80 e8       	ldi	r24, 0x80	; 128
     6aa:	8c df       	rcall	.-232    	; 0x5c4 <LCD_wBCommand>
	struct tm* time = gmtime(&time_sec);
     6ac:	84 e9       	ldi	r24, 0x94	; 148
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0c dd       	rcall	.-1512   	; 0xca <gmtime>
     6b2:	ec 01       	movw	r28, r24
	sprintf(time_str, " %d-%02d-%02d", time->tm_year + 1900, time->tm_mon + 1, time->tm_mday);
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	28 2f       	mov	r18, r24
     6b8:	08 2e       	mov	r0, r24
     6ba:	00 0c       	add	r0, r0
     6bc:	33 0b       	sbc	r19, r19
     6be:	3f 93       	push	r19
     6c0:	8f 93       	push	r24
     6c2:	8d 81       	ldd	r24, Y+5	; 0x05
     6c4:	08 2e       	mov	r0, r24
     6c6:	00 0c       	add	r0, r0
     6c8:	99 0b       	sbc	r25, r25
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	8e 81       	ldd	r24, Y+6	; 0x06
     6d2:	9f 81       	ldd	r25, Y+7	; 0x07
     6d4:	84 59       	subi	r24, 0x94	; 148
     6d6:	98 4f       	sbci	r25, 0xF8	; 248
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	86 e1       	ldi	r24, 0x16	; 22
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	9f 93       	push	r25
     6e2:	8f 93       	push	r24
     6e4:	88 e9       	ldi	r24, 0x98	; 152
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	9f 93       	push	r25
     6ea:	8f 93       	push	r24
     6ec:	ca d4       	rcall	.+2452   	; 0x1082 <sprintf>
	LCD_wString(time_str);
     6ee:	88 e9       	ldi	r24, 0x98	; 152
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	ca df       	rcall	.-108    	; 0x688 <LCD_wString>
	LCD_wBCommand(0x80 | 0x40);
     6f4:	80 ec       	ldi	r24, 0xC0	; 192
     6f6:	66 df       	rcall	.-308    	; 0x5c4 <LCD_wBCommand>
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
	int hour = time->tm_hour > 12 ? time->tm_hour - 12 : time->tm_hour;
     6fa:	2d b7       	in	r18, 0x3d	; 61
     6fc:	3e b7       	in	r19, 0x3e	; 62
     6fe:	26 5f       	subi	r18, 0xF6	; 246
     700:	3f 4f       	sbci	r19, 0xFF	; 255
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	3e bf       	out	0x3e, r19	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	2d bf       	out	0x3d, r18	; 61
     70c:	8d 30       	cpi	r24, 0x0D	; 13
     70e:	7c f0       	brlt	.+30     	; 0x72e <print_lcd+0x8a>
     710:	08 2e       	mov	r0, r24
     712:	00 0c       	add	r0, r0
     714:	99 0b       	sbc	r25, r25
     716:	0c 97       	sbiw	r24, 0x0c	; 12
     718:	48 81       	ld	r20, Y
	sprintf(time_str + 16, " %s %02d:%02d:%02d    ", (time->tm_hour > 12 ? "PM" : "AM"), hour, time->tm_min, time->tm_sec);
     71a:	04 2e       	mov	r0, r20
     71c:	00 0c       	add	r0, r0
     71e:	55 0b       	sbc	r21, r21
     720:	29 81       	ldd	r18, Y+1	; 0x01
     722:	02 2e       	mov	r0, r18
     724:	00 0c       	add	r0, r0
     726:	33 0b       	sbc	r19, r19
     728:	63 e1       	ldi	r22, 0x13	; 19
     72a:	71 e0       	ldi	r23, 0x01	; 1
     72c:	0d c0       	rjmp	.+26     	; 0x748 <print_lcd+0xa4>
     72e:	08 2e       	mov	r0, r24
	LCD_wBCommand(0x80 | 0x00);
	struct tm* time = gmtime(&time_sec);
	sprintf(time_str, " %d-%02d-%02d", time->tm_year + 1900, time->tm_mon + 1, time->tm_mday);
	LCD_wString(time_str);
	LCD_wBCommand(0x80 | 0x40);
	int hour = time->tm_hour > 12 ? time->tm_hour - 12 : time->tm_hour;
     730:	00 0c       	add	r0, r0
     732:	99 0b       	sbc	r25, r25
     734:	48 81       	ld	r20, Y
	sprintf(time_str + 16, " %s %02d:%02d:%02d    ", (time->tm_hour > 12 ? "PM" : "AM"), hour, time->tm_min, time->tm_sec);
     736:	04 2e       	mov	r0, r20
     738:	00 0c       	add	r0, r0
     73a:	55 0b       	sbc	r21, r21
     73c:	29 81       	ldd	r18, Y+1	; 0x01
     73e:	02 2e       	mov	r0, r18
     740:	00 0c       	add	r0, r0
     742:	33 0b       	sbc	r19, r19
     744:	60 e1       	ldi	r22, 0x10	; 16
     746:	71 e0       	ldi	r23, 0x01	; 1
     748:	5f 93       	push	r21
     74a:	4f 93       	push	r20
     74c:	3f 93       	push	r19
     74e:	2f 93       	push	r18
     750:	9f 93       	push	r25
     752:	8f 93       	push	r24
     754:	7f 93       	push	r23
     756:	6f 93       	push	r22
     758:	84 e2       	ldi	r24, 0x24	; 36
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	9f 93       	push	r25
     75e:	8f 93       	push	r24
     760:	88 ea       	ldi	r24, 0xA8	; 168
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	8c d4       	rcall	.+2328   	; 0x1082 <sprintf>
	LCD_wString(time_str + 16);
     76a:	88 ea       	ldi	r24, 0xA8	; 168
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	8c df       	rcall	.-232    	; 0x688 <LCD_wString>
     770:	8d b7       	in	r24, 0x3d	; 61
}
     772:	9e b7       	in	r25, 0x3e	; 62
     774:	0c 96       	adiw	r24, 0x0c	; 12
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	9e bf       	out	0x3e, r25	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	8d bf       	out	0x3d, r24	; 61
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	08 95       	ret

00000786 <alarm_set>:
     786:	0f 93       	push	r16

void alarm_set()
{
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	61 97       	sbiw	r28, 0x11	; 17
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	de bf       	out	0x3e, r29	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	cd bf       	out	0x3d, r28	; 61
	char str[17] = {0};
     79e:	fe 01       	movw	r30, r28
     7a0:	31 96       	adiw	r30, 0x01	; 1
     7a2:	81 e1       	ldi	r24, 0x11	; 17
     7a4:	df 01       	movw	r26, r30
     7a6:	1d 92       	st	X+, r1
     7a8:	8a 95       	dec	r24
     7aa:	e9 f7       	brne	.-6      	; 0x7a6 <alarm_set+0x20>
	LCD_wBCommand(0x80 | 0x00);
     7ac:	80 e8       	ldi	r24, 0x80	; 128
     7ae:	0a df       	rcall	.-492    	; 0x5c4 <LCD_wBCommand>
	LCD_wString(" ALARM SET..    ");
     7b0:	82 e4       	ldi	r24, 0x42	; 66
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	69 df       	rcall	.-302    	; 0x688 <LCD_wString>
	LCD_wBCommand(0x80 | 0x40);
     7b6:	80 ec       	ldi	r24, 0xC0	; 192
     7b8:	05 df       	rcall	.-502    	; 0x5c4 <LCD_wBCommand>
     7ba:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <al_hour>
	int hour = al_hour > 12 ? al_hour - 12 : al_hour;
     7be:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <al_hour+0x1>
     7c2:	8d 30       	cpi	r24, 0x0D	; 13
     7c4:	91 05       	cpc	r25, r1
     7c6:	a4 f1       	brlt	.+104    	; 0x830 <alarm_set+0xaa>
     7c8:	0c 97       	sbiw	r24, 0x0c	; 12
     7ca:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <isAlarmOn>
	sprintf(str, " %s %02d:%02d %s", (al_hour > 12 ? "PM" : "AM"), hour, al_min, (isAlarmOn ? "ON" : "OFF"));
     7ce:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <isAlarmOn+0x1>
     7d2:	23 2b       	or	r18, r19
     7d4:	e1 f1       	breq	.+120    	; 0x84e <alarm_set+0xc8>
     7d6:	1a c0       	rjmp	.+52     	; 0x80c <alarm_set+0x86>
     7d8:	5f 93       	push	r21
     7da:	4f 93       	push	r20
     7dc:	6f 93       	push	r22
     7de:	7f 93       	push	r23
     7e0:	9f 93       	push	r25
     7e2:	8f 93       	push	r24
     7e4:	3f 93       	push	r19
     7e6:	2f 93       	push	r18
     7e8:	83 e5       	ldi	r24, 0x53	; 83
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	9f 93       	push	r25
     7ee:	8f 93       	push	r24
     7f0:	8e 01       	movw	r16, r28
     7f2:	0f 5f       	subi	r16, 0xFF	; 255
     7f4:	1f 4f       	sbci	r17, 0xFF	; 255
     7f6:	1f 93       	push	r17
     7f8:	0f 93       	push	r16
     7fa:	43 d4       	rcall	.+2182   	; 0x1082 <sprintf>
	LCD_wString(str);
     7fc:	c8 01       	movw	r24, r16
     7fe:	44 df       	rcall	.-376    	; 0x688 <LCD_wString>
     800:	0f b6       	in	r0, 0x3f	; 63
}
     802:	f8 94       	cli
     804:	de bf       	out	0x3e, r29	; 62
     806:	0f be       	out	0x3f, r0	; 63
     808:	cd bf       	out	0x3d, r28	; 61
     80a:	2a c0       	rjmp	.+84     	; 0x860 <alarm_set+0xda>
     80c:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <al_min>
	char str[17] = {0};
	LCD_wBCommand(0x80 | 0x00);
	LCD_wString(" ALARM SET..    ");
	LCD_wBCommand(0x80 | 0x40);
	int hour = al_hour > 12 ? al_hour - 12 : al_hour;
	sprintf(str, " %s %02d:%02d %s", (al_hour > 12 ? "PM" : "AM"), hour, al_min, (isAlarmOn ? "ON" : "OFF"));
     810:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <al_min+0x1>
     814:	4f e3       	ldi	r20, 0x3F	; 63
     816:	51 e0       	ldi	r21, 0x01	; 1
     818:	23 e1       	ldi	r18, 0x13	; 19
     81a:	31 e0       	ldi	r19, 0x01	; 1
     81c:	dd cf       	rjmp	.-70     	; 0x7d8 <alarm_set+0x52>
     81e:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <al_min>
     822:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <al_min+0x1>
     826:	4f e3       	ldi	r20, 0x3F	; 63
     828:	51 e0       	ldi	r21, 0x01	; 1
     82a:	20 e1       	ldi	r18, 0x10	; 16
     82c:	31 e0       	ldi	r19, 0x01	; 1
     82e:	d4 cf       	rjmp	.-88     	; 0x7d8 <alarm_set+0x52>
     830:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <isAlarmOn>
     834:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <isAlarmOn+0x1>
     838:	23 2b       	or	r18, r19
     83a:	89 f7       	brne	.-30     	; 0x81e <alarm_set+0x98>
     83c:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <al_min>
     840:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <al_min+0x1>
     844:	4b e3       	ldi	r20, 0x3B	; 59
     846:	51 e0       	ldi	r21, 0x01	; 1
     848:	20 e1       	ldi	r18, 0x10	; 16
     84a:	31 e0       	ldi	r19, 0x01	; 1
     84c:	c5 cf       	rjmp	.-118    	; 0x7d8 <alarm_set+0x52>
     84e:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <al_min>
     852:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <al_min+0x1>
     856:	4b e3       	ldi	r20, 0x3B	; 59
     858:	51 e0       	ldi	r21, 0x01	; 1
     85a:	23 e1       	ldi	r18, 0x13	; 19
     85c:	31 e0       	ldi	r19, 0x01	; 1
     85e:	bc cf       	rjmp	.-136    	; 0x7d8 <alarm_set+0x52>
     860:	61 96       	adiw	r28, 0x11	; 17
	LCD_wString(str);
}
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <checkAlarm>:
     876:	84 e9       	ldi	r24, 0x94	; 148

int checkAlarm()
{
	struct tm* now = gmtime(&time_sec);
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	27 dc       	rcall	.-1970   	; 0xca <gmtime>
	return al_hour == now->tm_hour && al_min == now->tm_min;
     87c:	fc 01       	movw	r30, r24
     87e:	22 81       	ldd	r18, Z+2	; 0x02
     880:	02 2e       	mov	r0, r18
     882:	00 0c       	add	r0, r0
     884:	33 0b       	sbc	r19, r19
     886:	40 91 b9 01 	lds	r20, 0x01B9	; 0x8001b9 <al_hour>
     88a:	50 91 ba 01 	lds	r21, 0x01BA	; 0x8001ba <al_hour+0x1>
     88e:	24 17       	cp	r18, r20
     890:	35 07       	cpc	r19, r21
     892:	79 f4       	brne	.+30     	; 0x8b2 <checkAlarm+0x3c>
     894:	21 81       	ldd	r18, Z+1	; 0x01
     896:	02 2e       	mov	r0, r18
     898:	00 0c       	add	r0, r0
     89a:	33 0b       	sbc	r19, r19
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	40 91 cf 01 	lds	r20, 0x01CF	; 0x8001cf <al_min>
     8a4:	50 91 d0 01 	lds	r21, 0x01D0	; 0x8001d0 <al_min+0x1>
     8a8:	24 17       	cp	r18, r20
     8aa:	35 07       	cpc	r19, r21
     8ac:	21 f0       	breq	.+8      	; 0x8b6 <checkAlarm+0x40>
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	08 95       	ret
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
}
     8b6:	08 95       	ret

000008b8 <main>:

int main(void)
{
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	60 97       	sbiw	r28, 0x10	; 16
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
	struct tm init;
	init.tm_year = 2000 - 1900, init.tm_mon=0, init.tm_mday = 1;
     8cc:	84 e6       	ldi	r24, 0x64	; 100
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	98 87       	std	Y+8, r25	; 0x08
     8d2:	8f 83       	std	Y+7, r24	; 0x07
     8d4:	1e 82       	std	Y+6, r1	; 0x06
     8d6:	11 e0       	ldi	r17, 0x01	; 1
     8d8:	1c 83       	std	Y+4, r17	; 0x04
	init.tm_hour=0, init.tm_min=0, init.tm_sec = 0;
     8da:	1b 82       	std	Y+3, r1	; 0x03
     8dc:	1a 82       	std	Y+2, r1	; 0x02
     8de:	19 82       	std	Y+1, r1	; 0x01
	init.tm_isdst = -1;
     8e0:	8f ef       	ldi	r24, 0xFF	; 255
     8e2:	9f ef       	ldi	r25, 0xFF	; 255
     8e4:	9c 87       	std	Y+12, r25	; 0x0c
     8e6:	8b 87       	std	Y+11, r24	; 0x0b
	time_sec = mktime(&init);
     8e8:	ce 01       	movw	r24, r28
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	c9 dc       	rcall	.-1646   	; 0x280 <mktime>
     8ee:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <time_sec>
     8f2:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <time_sec+0x1>
     8f6:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <time_sec+0x2>
     8fa:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <time_sec+0x3>
	int cnt=0;
	
	DDRA = 0xFF;
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
     902:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;
     904:	11 ba       	out	0x11, r1	; 17
	DDRB = 0x01;
     906:	17 bb       	out	0x17, r17	; 23
	
	EIMSK = 0x0F; // enable 0~3 interrupts
     908:	8f e0       	ldi	r24, 0x0F	; 15
     90a:	89 bf       	out	0x39, r24	; 57
	EICRA = 0xAA; // falling edge
     90c:	8a ea       	ldi	r24, 0xAA	; 170
     90e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	sei();
	LCD_Init();
     912:	78 94       	sei
     914:	78 de       	rcall	.-784    	; 0x606 <LCD_Init>

    while (1) 
    {
		if(!(PIND & (1 << PIND4)) && mode == MAIN) 
		{
			mode = WATCH;
     916:	0f 2e       	mov	r0, r31
     918:	f3 e0       	ldi	r31, 0x03	; 3
     91a:	af 2e       	mov	r10, r31
     91c:	b1 2c       	mov	r11, r1
     91e:	f0 2d       	mov	r31, r0
		}
		
		if (checkAlarm() && isAlarmOn)
		{
			PORTB = 0x01;
     920:	99 24       	eor	r9, r9
     922:	93 94       	inc	r9
			{
				LCD_Cursor(1, i);
				LCD_wString(" ");
			}
			_delay_ms(500);
			isAlarmSetting = 1;
     924:	44 24       	eor	r4, r4
     926:	43 94       	inc	r4
     928:	51 2c       	mov	r5, r1
			time_t stop = 0;
			struct tm* t = gmtime(&stop);
			LCD_wBCommand(0x80 | 0x00);
			LCD_wString(" STOP Watch.. ");
			LCD_wBCommand(0x80 | 0x40);
			sprintf(buf, " %02d:%02d(sec)  ", t->tm_min, t->tm_sec);
     92a:	0f 2e       	mov	r0, r31
     92c:	f7 e7       	ldi	r31, 0x77	; 119
     92e:	cf 2e       	mov	r12, r31
     930:	f1 e0       	ldi	r31, 0x01	; 1
     932:	df 2e       	mov	r13, r31
     934:	f0 2d       	mov	r31, r0
     936:	0f 2e       	mov	r0, r31
     938:	fb eb       	ldi	r31, 0xBB	; 187
     93a:	ef 2e       	mov	r14, r31
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	ff 2e       	mov	r15, r31
     940:	f0 2d       	mov	r31, r0
			{
				struct tm* t = gmtime(&stop);
				LCD_wBCommand(0x80 | 0x00);
				LCD_wString(" STOP Watch.. ");
				LCD_wBCommand(0x80 | 0x40);
				sprintf(buf, " %02d:%02d(sec)  ", t->tm_min, t->tm_sec);
     942:	7e 2c       	mov	r7, r14
     944:	8f 2c       	mov	r8, r15
	sei();
	LCD_Init();

    while (1) 
    {
		if(!(PIND & (1 << PIND4)) && mode == MAIN) 
     946:	84 99       	sbic	0x10, 4	; 16
     948:	0a c0       	rjmp	.+20     	; 0x95e <main+0xa6>
     94a:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <mode>
     94e:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <mode+0x1>
     952:	89 2b       	or	r24, r25
     954:	21 f4       	brne	.+8      	; 0x95e <main+0xa6>
		{
			mode = WATCH;
     956:	b0 92 93 01 	sts	0x0193, r11	; 0x800193 <mode+0x1>
     95a:	a0 92 92 01 	sts	0x0192, r10	; 0x800192 <mode>
		}
		
		if (checkAlarm() && isAlarmOn)
     95e:	8b df       	rcall	.-234    	; 0x876 <checkAlarm>
     960:	89 2b       	or	r24, r25
     962:	71 f0       	breq	.+28     	; 0x980 <main+0xc8>
     964:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <isAlarmOn>
     968:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <isAlarmOn+0x1>
     96c:	89 2b       	or	r24, r25
     96e:	41 f0       	breq	.+16     	; 0x980 <main+0xc8>
		{
			PORTB = 0x01;
			LCD_Cursor(0, 0);
     970:	98 ba       	out	0x18, r9	; 24
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	80 e0       	ldi	r24, 0x00	; 0
			LCD_wString("jnj");
     976:	3f de       	rcall	.-898    	; 0x5f6 <LCD_Cursor>
     978:	84 e6       	ldi	r24, 0x64	; 100
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	85 de       	rcall	.-758    	; 0x688 <LCD_wString>
     97e:	01 c0       	rjmp	.+2      	; 0x982 <main+0xca>
		}
		else
		{
			PORTB = 0x00;
     980:	18 ba       	out	0x18, r1	; 24
		}
	
		if (mode == MAIN)
     982:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <mode>
     986:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <mode+0x1>
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	a9 f4       	brne	.+42     	; 0x9b8 <main+0x100>
		{
			time_sec++;
     98e:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <time_sec>
     992:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <time_sec+0x1>
     996:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <time_sec+0x2>
     99a:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <time_sec+0x3>
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	a1 1d       	adc	r26, r1
     9a2:	b1 1d       	adc	r27, r1
     9a4:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <time_sec>
     9a8:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <time_sec+0x1>
     9ac:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <time_sec+0x2>
     9b0:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <time_sec+0x3>
			print_lcd();
     9b4:	77 de       	rcall	.-786    	; 0x6a4 <print_lcd>
		}
		else if (mode == SETTIME)
     9b6:	1b c1       	rjmp	.+566    	; 0xbee <main+0x336>
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	91 05       	cpc	r25, r1
		{
			LCD_wBCommand(0x80 | 0x00);
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <main+0x108>
     9be:	52 c0       	rjmp	.+164    	; 0xa64 <main+0x1ac>
			LCD_wString(time_str);
     9c0:	80 e8       	ldi	r24, 0x80	; 128
     9c2:	00 de       	rcall	.-1024   	; 0x5c4 <LCD_wBCommand>
     9c4:	88 e9       	ldi	r24, 0x98	; 152
			LCD_wBCommand(0x80 | 0x40);
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	5f de       	rcall	.-834    	; 0x688 <LCD_wString>
     9ca:	80 ec       	ldi	r24, 0xC0	; 192
			LCD_wString(time_str + 16);
     9cc:	fb dd       	rcall	.-1034   	; 0x5c4 <LCD_wBCommand>
     9ce:	88 ea       	ldi	r24, 0xA8	; 168
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	5a de       	rcall	.-844    	; 0x688 <LCD_wString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	89 e6       	ldi	r24, 0x69	; 105
     9d8:	98 e1       	ldi	r25, 0x18	; 24
     9da:	21 50       	subi	r18, 0x01	; 1
     9dc:	80 40       	sbci	r24, 0x00	; 0
     9de:	90 40       	sbci	r25, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <main+0x122>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <main+0x12c>
     9e4:	00 00       	nop
			_delay_ms(500);
			for (int i = time_idx[set_idx]; i <= time_idx[set_idx + 1]; i++)
     9e6:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <set_idx>
     9ea:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <set_idx+0x1>
     9ee:	ec 5f       	subi	r30, 0xFC	; 252
     9f0:	fe 4f       	sbci	r31, 0xFE	; 254
     9f2:	00 81       	ld	r16, Z
     9f4:	10 e0       	ldi	r17, 0x00	; 0
     9f6:	81 81       	ldd	r24, Z+1	; 0x01
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	80 17       	cp	r24, r16
     9fc:	91 07       	cpc	r25, r17
     9fe:	44 f1       	brlt	.+80     	; 0xa50 <main+0x198>
			{	
				LCD_Cursor(i / 16, i % 16);
     a00:	b8 01       	movw	r22, r16
     a02:	6f 70       	andi	r22, 0x0F	; 15
     a04:	70 78       	andi	r23, 0x80	; 128
     a06:	77 23       	and	r23, r23
     a08:	34 f4       	brge	.+12     	; 0xa16 <main+0x15e>
     a0a:	61 50       	subi	r22, 0x01	; 1
     a0c:	71 09       	sbc	r23, r1
     a0e:	60 6f       	ori	r22, 0xF0	; 240
     a10:	7f 6f       	ori	r23, 0xFF	; 255
     a12:	6f 5f       	subi	r22, 0xFF	; 255
     a14:	7f 4f       	sbci	r23, 0xFF	; 255
     a16:	c8 01       	movw	r24, r16
     a18:	11 23       	and	r17, r17
     a1a:	0c f4       	brge	.+2      	; 0xa1e <main+0x166>
     a1c:	0f 96       	adiw	r24, 0x0f	; 15
     a1e:	95 95       	asr	r25
     a20:	87 95       	ror	r24
     a22:	95 95       	asr	r25
     a24:	87 95       	ror	r24
     a26:	95 95       	asr	r25
     a28:	87 95       	ror	r24
     a2a:	95 95       	asr	r25
     a2c:	87 95       	ror	r24
				LCD_wString(" ");
     a2e:	e3 dd       	rcall	.-1082   	; 0x5f6 <LCD_Cursor>
     a30:	81 e5       	ldi	r24, 0x51	; 81
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	29 de       	rcall	.-942    	; 0x688 <LCD_wString>
			LCD_wBCommand(0x80 | 0x00);
			LCD_wString(time_str);
			LCD_wBCommand(0x80 | 0x40);
			LCD_wString(time_str + 16);
			_delay_ms(500);
			for (int i = time_idx[set_idx]; i <= time_idx[set_idx + 1]; i++)
     a36:	0f 5f       	subi	r16, 0xFF	; 255
     a38:	1f 4f       	sbci	r17, 0xFF	; 255
     a3a:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <set_idx>
     a3e:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <set_idx+0x1>
     a42:	ec 5f       	subi	r30, 0xFC	; 252
     a44:	fe 4f       	sbci	r31, 0xFE	; 254
     a46:	81 81       	ldd	r24, Z+1	; 0x01
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	80 17       	cp	r24, r16
     a4c:	91 07       	cpc	r25, r17
     a4e:	c4 f6       	brge	.-80     	; 0xa00 <main+0x148>
     a50:	ef ef       	ldi	r30, 0xFF	; 255
     a52:	f9 e6       	ldi	r31, 0x69	; 105
     a54:	28 e1       	ldi	r18, 0x18	; 24
     a56:	e1 50       	subi	r30, 0x01	; 1
     a58:	f0 40       	sbci	r31, 0x00	; 0
     a5a:	20 40       	sbci	r18, 0x00	; 0
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <main+0x19e>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <main+0x1a8>
     a60:	00 00       	nop
				LCD_Cursor(i / 16, i % 16);
				LCD_wString(" ");
			}
			_delay_ms(500);
		}
		else if (mode == WATCH) 
     a62:	c5 c0       	rjmp	.+394    	; 0xbee <main+0x336>
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	91 05       	cpc	r25, r1
		{
			time_t stop = 0;
     a68:	09 f0       	breq	.+2      	; 0xa6c <main+0x1b4>
     a6a:	84 c0       	rjmp	.+264    	; 0xb74 <main+0x2bc>
			struct tm* t = gmtime(&stop);
     a6c:	1d 86       	std	Y+13, r1	; 0x0d
     a6e:	1e 86       	std	Y+14, r1	; 0x0e
     a70:	1f 86       	std	Y+15, r1	; 0x0f
     a72:	18 8a       	std	Y+16, r1	; 0x10
     a74:	ce 01       	movw	r24, r28
			LCD_wBCommand(0x80 | 0x00);
     a76:	0d 96       	adiw	r24, 0x0d	; 13
     a78:	28 db       	rcall	.-2480   	; 0xca <gmtime>
     a7a:	8c 01       	movw	r16, r24
			LCD_wString(" STOP Watch.. ");
     a7c:	80 e8       	ldi	r24, 0x80	; 128
     a7e:	a2 dd       	rcall	.-1212   	; 0x5c4 <LCD_wBCommand>
     a80:	88 e6       	ldi	r24, 0x68	; 104
     a82:	91 e0       	ldi	r25, 0x01	; 1
			LCD_wBCommand(0x80 | 0x40);
     a84:	01 de       	rcall	.-1022   	; 0x688 <LCD_wString>
     a86:	80 ec       	ldi	r24, 0xC0	; 192
     a88:	9d dd       	rcall	.-1222   	; 0x5c4 <LCD_wBCommand>
			sprintf(buf, " %02d:%02d(sec)  ", t->tm_min, t->tm_sec);
     a8a:	f8 01       	movw	r30, r16
     a8c:	80 81       	ld	r24, Z
     a8e:	28 2f       	mov	r18, r24
     a90:	08 2e       	mov	r0, r24
     a92:	00 0c       	add	r0, r0
     a94:	33 0b       	sbc	r19, r19
     a96:	3f 93       	push	r19
     a98:	8f 93       	push	r24
     a9a:	81 81       	ldd	r24, Z+1	; 0x01
     a9c:	28 2f       	mov	r18, r24
     a9e:	08 2e       	mov	r0, r24
     aa0:	00 0c       	add	r0, r0
     aa2:	33 0b       	sbc	r19, r19
     aa4:	3f 93       	push	r19
     aa6:	8f 93       	push	r24
     aa8:	df 92       	push	r13
     aaa:	cf 92       	push	r12
     aac:	ff 92       	push	r15
     aae:	ef 92       	push	r14
			LCD_wString(buf);
     ab0:	e8 d2       	rcall	.+1488   	; 0x1082 <sprintf>
     ab2:	c7 01       	movw	r24, r14
     ab4:	e9 dd       	rcall	.-1070   	; 0x688 <LCD_wString>
			while (PIND & (1 << PIND2));
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
     ac0:	82 99       	sbic	0x10, 2	; 16
     ac2:	fe cf       	rjmp	.-4      	; 0xac0 <main+0x208>
     ac4:	9f ef       	ldi	r25, 0xFF	; 255
     ac6:	e9 e6       	ldi	r30, 0x69	; 105
     ac8:	f8 e1       	ldi	r31, 0x18	; 24
     aca:	91 50       	subi	r25, 0x01	; 1
     acc:	e0 40       	sbci	r30, 0x00	; 0
			_delay_ms(500);
			while((PIND & (1 << PIND2)))
     ace:	f0 40       	sbci	r31, 0x00	; 0
     ad0:	e1 f7       	brne	.-8      	; 0xaca <main+0x212>
			{
				struct tm* t = gmtime(&stop);
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <main+0x21c>
     ad4:	00 00       	nop
     ad6:	82 9b       	sbis	0x10, 2	; 16
     ad8:	3d c0       	rjmp	.+122    	; 0xb54 <main+0x29c>
     ada:	ce 01       	movw	r24, r28
				LCD_wBCommand(0x80 | 0x00);
     adc:	0d 96       	adiw	r24, 0x0d	; 13
     ade:	f5 da       	rcall	.-2582   	; 0xca <gmtime>
     ae0:	8c 01       	movw	r16, r24
				LCD_wString(" STOP Watch.. ");
     ae2:	80 e8       	ldi	r24, 0x80	; 128
     ae4:	6f dd       	rcall	.-1314   	; 0x5c4 <LCD_wBCommand>
     ae6:	88 e6       	ldi	r24, 0x68	; 104
     ae8:	91 e0       	ldi	r25, 0x01	; 1
				LCD_wBCommand(0x80 | 0x40);
     aea:	ce dd       	rcall	.-1124   	; 0x688 <LCD_wString>
     aec:	80 ec       	ldi	r24, 0xC0	; 192
				sprintf(buf, " %02d:%02d(sec)  ", t->tm_min, t->tm_sec);
     aee:	6a dd       	rcall	.-1324   	; 0x5c4 <LCD_wBCommand>
     af0:	f8 01       	movw	r30, r16
     af2:	80 81       	ld	r24, Z
     af4:	28 2f       	mov	r18, r24
     af6:	08 2e       	mov	r0, r24
     af8:	00 0c       	add	r0, r0
     afa:	33 0b       	sbc	r19, r19
     afc:	3f 93       	push	r19
     afe:	8f 93       	push	r24
     b00:	81 81       	ldd	r24, Z+1	; 0x01
     b02:	28 2f       	mov	r18, r24
     b04:	08 2e       	mov	r0, r24
     b06:	00 0c       	add	r0, r0
     b08:	33 0b       	sbc	r19, r19
     b0a:	3f 93       	push	r19
     b0c:	8f 93       	push	r24
     b0e:	df 92       	push	r13
     b10:	cf 92       	push	r12
     b12:	ff 92       	push	r15
     b14:	ef 92       	push	r14
				LCD_wString(buf);
     b16:	b5 d2       	rcall	.+1386   	; 0x1082 <sprintf>
     b18:	87 2d       	mov	r24, r7
     b1a:	98 2d       	mov	r25, r8
     b1c:	b5 dd       	rcall	.-1174   	; 0x688 <LCD_wString>
				stop++;
     b1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b20:	9e 85       	ldd	r25, Y+14	; 0x0e
     b22:	af 85       	ldd	r26, Y+15	; 0x0f
     b24:	b8 89       	ldd	r27, Y+16	; 0x10
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	a1 1d       	adc	r26, r1
     b2a:	b1 1d       	adc	r27, r1
     b2c:	8d 87       	std	Y+13, r24	; 0x0d
     b2e:	9e 87       	std	Y+14, r25	; 0x0e
     b30:	af 87       	std	Y+15, r26	; 0x0f
     b32:	b8 8b       	std	Y+16, r27	; 0x10
     b34:	ff ef       	ldi	r31, 0xFF	; 255
     b36:	21 ee       	ldi	r18, 0xE1	; 225
     b38:	84 e0       	ldi	r24, 0x04	; 4
     b3a:	f1 50       	subi	r31, 0x01	; 1
     b3c:	20 40       	sbci	r18, 0x00	; 0
     b3e:	80 40       	sbci	r24, 0x00	; 0
     b40:	e1 f7       	brne	.-8      	; 0xb3a <main+0x282>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <main+0x28c>
     b44:	00 00       	nop
			LCD_wBCommand(0x80 | 0x40);
			sprintf(buf, " %02d:%02d(sec)  ", t->tm_min, t->tm_sec);
			LCD_wString(buf);
			while (PIND & (1 << PIND2));
			_delay_ms(500);
			while((PIND & (1 << PIND2)))
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	82 99       	sbic	0x10, 2	; 16
				sprintf(buf, " %02d:%02d(sec)  ", t->tm_min, t->tm_sec);
				LCD_wString(buf);
				stop++;
				_delay_ms(100);
			}
			mode = MAIN;
     b52:	c3 cf       	rjmp	.-122    	; 0xada <main+0x222>
     b54:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <mode+0x1>
     b58:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <mode>
			while (PIND & (1 << PIND2));
     b5c:	82 99       	sbic	0x10, 2	; 16
     b5e:	fe cf       	rjmp	.-4      	; 0xb5c <main+0x2a4>
     b60:	ff ef       	ldi	r31, 0xFF	; 255
     b62:	27 ea       	ldi	r18, 0xA7	; 167
     b64:	81 e6       	ldi	r24, 0x61	; 97
     b66:	f1 50       	subi	r31, 0x01	; 1
     b68:	20 40       	sbci	r18, 0x00	; 0
     b6a:	80 40       	sbci	r24, 0x00	; 0
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <main+0x2ae>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <main+0x2b8>
     b70:	00 00       	nop
			_delay_ms(2000);
		}
		else if (mode == ALARM)
     b72:	3d c0       	rjmp	.+122    	; 0xbee <main+0x336>
     b74:	02 97       	sbiw	r24, 0x02	; 2
		{
			alarm_set();
     b76:	d9 f5       	brne	.+118    	; 0xbee <main+0x336>
     b78:	06 de       	rcall	.-1012   	; 0x786 <alarm_set>
     b7a:	9f ef       	ldi	r25, 0xFF	; 255
     b7c:	e9 e6       	ldi	r30, 0x69	; 105
     b7e:	f8 e1       	ldi	r31, 0x18	; 24
     b80:	91 50       	subi	r25, 0x01	; 1
     b82:	e0 40       	sbci	r30, 0x00	; 0
     b84:	f0 40       	sbci	r31, 0x00	; 0
     b86:	e1 f7       	brne	.-8      	; 0xb80 <main+0x2c8>
			_delay_ms(500);
			for (int i = alarm_idx[alarm_set_idx * 2]; i <= alarm_idx[alarm_set_idx * 2 + 1]; i++)
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <main+0x2d2>
     b8a:	00 00       	nop
     b8c:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <alarm_set_idx>
     b90:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <alarm_set_idx+0x1>
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	e0 50       	subi	r30, 0x00	; 0
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	00 81       	ld	r16, Z
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	80 17       	cp	r24, r16
			{
				LCD_Cursor(1, i);
     ba6:	91 07       	cpc	r25, r17
     ba8:	ac f0       	brlt	.+42     	; 0xbd4 <main+0x31c>
     baa:	60 2f       	mov	r22, r16
     bac:	89 2d       	mov	r24, r9
				LCD_wString(" ");
     bae:	23 dd       	rcall	.-1466   	; 0x5f6 <LCD_Cursor>
     bb0:	81 e5       	ldi	r24, 0x51	; 81
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	69 dd       	rcall	.-1326   	; 0x688 <LCD_wString>
		}
		else if (mode == ALARM)
		{
			alarm_set();
			_delay_ms(500);
			for (int i = alarm_idx[alarm_set_idx * 2]; i <= alarm_idx[alarm_set_idx * 2 + 1]; i++)
     bb6:	0f 5f       	subi	r16, 0xFF	; 255
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255
     bba:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <alarm_set_idx>
     bbe:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <alarm_set_idx+0x1>
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	e0 50       	subi	r30, 0x00	; 0
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	81 81       	ldd	r24, Z+1	; 0x01
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	80 17       	cp	r24, r16
     bd0:	91 07       	cpc	r25, r17
     bd2:	5c f7       	brge	.-42     	; 0xbaa <main+0x2f2>
     bd4:	2f ef       	ldi	r18, 0xFF	; 255
     bd6:	89 e6       	ldi	r24, 0x69	; 105
     bd8:	98 e1       	ldi	r25, 0x18	; 24
     bda:	21 50       	subi	r18, 0x01	; 1
     bdc:	80 40       	sbci	r24, 0x00	; 0
     bde:	90 40       	sbci	r25, 0x00	; 0
     be0:	e1 f7       	brne	.-8      	; 0xbda <main+0x322>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <main+0x32c>
     be4:	00 00       	nop
			{
				LCD_Cursor(1, i);
				LCD_wString(" ");
			}
			_delay_ms(500);
			isAlarmSetting = 1;
     be6:	50 92 8b 01 	sts	0x018B, r5	; 0x80018b <__data_end+0x1>
     bea:	40 92 8a 01 	sts	0x018A, r4	; 0x80018a <__data_end>
     bee:	ef ef       	ldi	r30, 0xFF	; 255
     bf0:	f1 ee       	ldi	r31, 0xE1	; 225
     bf2:	24 e0       	ldi	r18, 0x04	; 4
     bf4:	e1 50       	subi	r30, 0x01	; 1
     bf6:	f0 40       	sbci	r31, 0x00	; 0
     bf8:	20 40       	sbci	r18, 0x00	; 0
     bfa:	e1 f7       	brne	.-8      	; 0xbf4 <main+0x33c>
     bfc:	00 c0       	rjmp	.+0      	; 0xbfe <main+0x346>
     bfe:	00 00       	nop
     c00:	a2 ce       	rjmp	.-700    	; 0x946 <main+0x8e>

00000c02 <__vector_1>:
		_delay_ms(100);
    }
}

ISR(INT0_vect) // UP
{
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	0b b6       	in	r0, 0x3b	; 59
     c0e:	0f 92       	push	r0
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	4f 93       	push	r20
     c16:	5f 93       	push	r21
     c18:	6f 93       	push	r22
     c1a:	7f 93       	push	r23
     c1c:	8f 93       	push	r24
     c1e:	9f 93       	push	r25
     c20:	af 93       	push	r26
     c22:	bf 93       	push	r27
     c24:	ef 93       	push	r30
     c26:	ff 93       	push	r31
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	2c 97       	sbiw	r28, 0x0c	; 12
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	cd bf       	out	0x3d, r28	; 61
	if (mode == SETTIME)
     c36:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <mode>
     c3a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <mode+0x1>
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	91 05       	cpc	r25, r1
     c42:	d1 f5       	brne	.+116    	; 0xcb8 <__vector_1+0xb6>
	{
		struct tm* up = gmtime(&time_sec);
     c44:	84 e9       	ldi	r24, 0x94	; 148
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	40 da       	rcall	.-2944   	; 0xca <gmtime>
		int* arr[] = {&up->tm_year,&up->tm_mon,&up->tm_mday,&up->tm_hour,&up->tm_min,&up->tm_sec};
     c4a:	9c 01       	movw	r18, r24
     c4c:	2a 5f       	subi	r18, 0xFA	; 250
     c4e:	3f 4f       	sbci	r19, 0xFF	; 255
     c50:	3a 83       	std	Y+2, r19	; 0x02
     c52:	29 83       	std	Y+1, r18	; 0x01
     c54:	21 50       	subi	r18, 0x01	; 1
     c56:	31 09       	sbc	r19, r1
     c58:	3c 83       	std	Y+4, r19	; 0x04
     c5a:	2b 83       	std	Y+3, r18	; 0x03
     c5c:	22 50       	subi	r18, 0x02	; 2
     c5e:	31 09       	sbc	r19, r1
     c60:	3e 83       	std	Y+6, r19	; 0x06
     c62:	2d 83       	std	Y+5, r18	; 0x05
     c64:	21 50       	subi	r18, 0x01	; 1
     c66:	31 09       	sbc	r19, r1
     c68:	38 87       	std	Y+8, r19	; 0x08
     c6a:	2f 83       	std	Y+7, r18	; 0x07
     c6c:	21 50       	subi	r18, 0x01	; 1
     c6e:	31 09       	sbc	r19, r1
     c70:	3a 87       	std	Y+10, r19	; 0x0a
     c72:	29 87       	std	Y+9, r18	; 0x09
     c74:	9c 87       	std	Y+12, r25	; 0x0c
     c76:	8b 87       	std	Y+11, r24	; 0x0b
		(*arr[set_idx / 2])++;
     c78:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <set_idx>
     c7c:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <set_idx+0x1>
     c80:	33 23       	and	r19, r19
     c82:	14 f4       	brge	.+4      	; 0xc88 <__vector_1+0x86>
     c84:	2f 5f       	subi	r18, 0xFF	; 255
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	2e 7f       	andi	r18, 0xFE	; 254
     c8a:	fe 01       	movw	r30, r28
     c8c:	e2 0f       	add	r30, r18
     c8e:	f3 1f       	adc	r31, r19
     c90:	01 80       	ldd	r0, Z+1	; 0x01
     c92:	f2 81       	ldd	r31, Z+2	; 0x02
     c94:	e0 2d       	mov	r30, r0
     c96:	20 81       	ld	r18, Z
     c98:	31 81       	ldd	r19, Z+1	; 0x01
     c9a:	2f 5f       	subi	r18, 0xFF	; 255
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
     c9e:	31 83       	std	Z+1, r19	; 0x01
		time_sec = mktime(up);
     ca0:	20 83       	st	Z, r18
     ca2:	ee da       	rcall	.-2596   	; 0x280 <mktime>
     ca4:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <time_sec>
     ca8:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <time_sec+0x1>
     cac:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <time_sec+0x2>
     cb0:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <time_sec+0x3>
		print_lcd();
     cb4:	f7 dc       	rcall	.-1554   	; 0x6a4 <print_lcd>
     cb6:	1a c0       	rjmp	.+52     	; 0xcec <__vector_1+0xea>
	}
	else if (mode == ALARM)
     cb8:	02 97       	sbiw	r24, 0x02	; 2
     cba:	c1 f4       	brne	.+48     	; 0xcec <__vector_1+0xea>
	{
		int* arr[] = {&al_hour, &al_min};
     cbc:	89 eb       	ldi	r24, 0xB9	; 185
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	8f ec       	ldi	r24, 0xCF	; 207
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	9c 83       	std	Y+4, r25	; 0x04
     cca:	8b 83       	std	Y+3, r24	; 0x03
		(*arr[alarm_set_idx])++;
     ccc:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <alarm_set_idx>
     cd0:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <alarm_set_idx+0x1>
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	ec 0f       	add	r30, r28
     cda:	fd 1f       	adc	r31, r29
     cdc:	01 80       	ldd	r0, Z+1	; 0x01
     cde:	f2 81       	ldd	r31, Z+2	; 0x02
     ce0:	e0 2d       	mov	r30, r0
     ce2:	80 81       	ld	r24, Z
     ce4:	91 81       	ldd	r25, Z+1	; 0x01
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	91 83       	std	Z+1, r25	; 0x01
     cea:	80 83       	st	Z, r24
	}
}
     cec:	2c 96       	adiw	r28, 0x0c	; 12
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0b be       	out	0x3b, r0	; 59
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <__vector_2>:

ISR(INT1_vect) // DOWN
{
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	0b b6       	in	r0, 0x3b	; 59
     d2e:	0f 92       	push	r0
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	2c 97       	sbiw	r28, 0x0c	; 12
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	cd bf       	out	0x3d, r28	; 61
	if (mode == SETTIME)
     d56:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <mode>
     d5a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <mode+0x1>
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	91 05       	cpc	r25, r1
     d62:	d1 f5       	brne	.+116    	; 0xdd8 <__vector_2+0xb6>
	{
		struct tm* up = gmtime(&time_sec);
     d64:	84 e9       	ldi	r24, 0x94	; 148
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	b0 d9       	rcall	.-3232   	; 0xca <gmtime>
		int* arr[] = {&up->tm_year,&up->tm_mon,&up->tm_mday,&up->tm_hour,&up->tm_min,&up->tm_sec};
     d6a:	9c 01       	movw	r18, r24
     d6c:	2a 5f       	subi	r18, 0xFA	; 250
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	3a 83       	std	Y+2, r19	; 0x02
     d72:	29 83       	std	Y+1, r18	; 0x01
     d74:	21 50       	subi	r18, 0x01	; 1
     d76:	31 09       	sbc	r19, r1
     d78:	3c 83       	std	Y+4, r19	; 0x04
     d7a:	2b 83       	std	Y+3, r18	; 0x03
     d7c:	22 50       	subi	r18, 0x02	; 2
     d7e:	31 09       	sbc	r19, r1
     d80:	3e 83       	std	Y+6, r19	; 0x06
     d82:	2d 83       	std	Y+5, r18	; 0x05
     d84:	21 50       	subi	r18, 0x01	; 1
     d86:	31 09       	sbc	r19, r1
     d88:	38 87       	std	Y+8, r19	; 0x08
     d8a:	2f 83       	std	Y+7, r18	; 0x07
     d8c:	21 50       	subi	r18, 0x01	; 1
     d8e:	31 09       	sbc	r19, r1
     d90:	3a 87       	std	Y+10, r19	; 0x0a
     d92:	29 87       	std	Y+9, r18	; 0x09
     d94:	9c 87       	std	Y+12, r25	; 0x0c
     d96:	8b 87       	std	Y+11, r24	; 0x0b
		(*arr[set_idx / 2])--;
     d98:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <set_idx>
     d9c:	30 91 91 01 	lds	r19, 0x0191	; 0x800191 <set_idx+0x1>
     da0:	33 23       	and	r19, r19
     da2:	14 f4       	brge	.+4      	; 0xda8 <__vector_2+0x86>
     da4:	2f 5f       	subi	r18, 0xFF	; 255
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	2e 7f       	andi	r18, 0xFE	; 254
     daa:	fe 01       	movw	r30, r28
     dac:	e2 0f       	add	r30, r18
     dae:	f3 1f       	adc	r31, r19
     db0:	01 80       	ldd	r0, Z+1	; 0x01
     db2:	f2 81       	ldd	r31, Z+2	; 0x02
     db4:	e0 2d       	mov	r30, r0
     db6:	20 81       	ld	r18, Z
     db8:	31 81       	ldd	r19, Z+1	; 0x01
     dba:	21 50       	subi	r18, 0x01	; 1
     dbc:	31 09       	sbc	r19, r1
     dbe:	31 83       	std	Z+1, r19	; 0x01
		time_sec = mktime(up);
     dc0:	20 83       	st	Z, r18
     dc2:	5e da       	rcall	.-2884   	; 0x280 <mktime>
     dc4:	60 93 94 01 	sts	0x0194, r22	; 0x800194 <time_sec>
     dc8:	70 93 95 01 	sts	0x0195, r23	; 0x800195 <time_sec+0x1>
     dcc:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <time_sec+0x2>
     dd0:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <time_sec+0x3>
		print_lcd();
     dd4:	67 dc       	rcall	.-1842   	; 0x6a4 <print_lcd>
     dd6:	1a c0       	rjmp	.+52     	; 0xe0c <__vector_2+0xea>
	}
	else if (mode == ALARM)
     dd8:	02 97       	sbiw	r24, 0x02	; 2
     dda:	c1 f4       	brne	.+48     	; 0xe0c <__vector_2+0xea>
	{
		int* arr[] = {&al_hour, &al_min};
     ddc:	89 eb       	ldi	r24, 0xB9	; 185
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	8f ec       	ldi	r24, 0xCF	; 207
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
		(*arr[alarm_set_idx])--;
     dec:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <alarm_set_idx>
     df0:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <alarm_set_idx+0x1>
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ec 0f       	add	r30, r28
     dfa:	fd 1f       	adc	r31, r29
     dfc:	01 80       	ldd	r0, Z+1	; 0x01
     dfe:	f2 81       	ldd	r31, Z+2	; 0x02
     e00:	e0 2d       	mov	r30, r0
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	01 97       	sbiw	r24, 0x01	; 1
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
	}
}
     e0c:	2c 96       	adiw	r28, 0x0c	; 12
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	bf 91       	pop	r27
     e22:	af 91       	pop	r26
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	7f 91       	pop	r23
     e2a:	6f 91       	pop	r22
     e2c:	5f 91       	pop	r21
     e2e:	4f 91       	pop	r20
     e30:	3f 91       	pop	r19
     e32:	2f 91       	pop	r18
     e34:	0f 90       	pop	r0
     e36:	0b be       	out	0x3b, r0	; 59
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <__vector_3>:

ISR(INT2_vect) // Set
{
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	11 24       	eor	r1, r1
     e4c:	2f 93       	push	r18
     e4e:	3f 93       	push	r19
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
     e62:	00 d0       	rcall	.+0      	; 0xe64 <__vector_3+0x22>
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t cnt = 0;
     e68:	1a 82       	std	Y+2, r1	; 0x02
     e6a:	19 82       	std	Y+1, r1	; 0x01
	while (!(PIND & 0x04) && mode != WATCH)
     e6c:	82 99       	sbic	0x10, 2	; 16
     e6e:	1b c0       	rjmp	.+54     	; 0xea6 <__vector_3+0x64>
     e70:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <mode>
     e74:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <mode+0x1>
     e78:	03 97       	sbiw	r24, 0x03	; 3
     e7a:	09 f4       	brne	.+2      	; 0xe7e <__vector_3+0x3c>
     e7c:	60 c0       	rjmp	.+192    	; 0xf3e <__vector_3+0xfc>
	{
		cnt++;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	8f e9       	ldi	r24, 0x9F	; 159
     e8a:	9f e0       	ldi	r25, 0x0F	; 15
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <__vector_3+0x4a>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <__vector_3+0x50>
     e92:	00 00       	nop
}

ISR(INT2_vect) // Set
{
	volatile uint16_t cnt = 0;
	while (!(PIND & 0x04) && mode != WATCH)
     e94:	82 99       	sbic	0x10, 2	; 16
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <__vector_3+0x64>
     e98:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <mode>
     e9c:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <mode+0x1>
     ea0:	03 97       	sbiw	r24, 0x03	; 3
     ea2:	69 f7       	brne	.-38     	; 0xe7e <__vector_3+0x3c>
     ea4:	4c c0       	rjmp	.+152    	; 0xf3e <__vector_3+0xfc>
	{
		cnt++;
		_delay_ms(1);
	}
	
	if (cnt > LONGTIME)
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	89 3e       	cpi	r24, 0xE9	; 233
     eac:	93 40       	sbci	r25, 0x03	; 3
     eae:	80 f0       	brcs	.+32     	; 0xed0 <__vector_3+0x8e>
	{
		if (!(PIND & (1 << PIND3)) && mode == MAIN)
     eb0:	83 99       	sbic	0x10, 3	; 16
     eb2:	4b c0       	rjmp	.+150    	; 0xf4a <__vector_3+0x108>
     eb4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <mode>
     eb8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <mode+0x1>
     ebc:	89 2b       	or	r24, r25
     ebe:	09 f0       	breq	.+2      	; 0xec2 <__vector_3+0x80>
     ec0:	44 c0       	rjmp	.+136    	; 0xf4a <__vector_3+0x108>
		{
			mode = ALARM;
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <mode+0x1>
     eca:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <mode>
     ece:	3d c0       	rjmp	.+122    	; 0xf4a <__vector_3+0x108>
		}
	}
	else
	{
		if (mode == SETTIME)
     ed0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <mode>
     ed4:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <mode+0x1>
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	91 05       	cpc	r25, r1
     edc:	b1 f4       	brne	.+44     	; 0xf0a <__vector_3+0xc8>
		{
			set_idx = (set_idx + 2) % 12;
     ede:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <set_idx>
     ee2:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <set_idx+0x1>
     ee6:	02 96       	adiw	r24, 0x02	; 2
     ee8:	6c e0       	ldi	r22, 0x0C	; 12
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	a3 d0       	rcall	.+326    	; 0x1034 <__divmodhi4>
     eee:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <set_idx+0x1>
     ef2:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <set_idx>
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	95 ea       	ldi	r25, 0xA5	; 165
     efa:	2e e0       	ldi	r18, 0x0E	; 14
     efc:	81 50       	subi	r24, 0x01	; 1
     efe:	90 40       	sbci	r25, 0x00	; 0
     f00:	20 40       	sbci	r18, 0x00	; 0
     f02:	e1 f7       	brne	.-8      	; 0xefc <__vector_3+0xba>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <__vector_3+0xc4>
     f06:	00 00       	nop
     f08:	20 c0       	rjmp	.+64     	; 0xf4a <__vector_3+0x108>
			_delay_ms(300);
		}
		else if (mode == ALARM)
     f0a:	02 97       	sbiw	r24, 0x02	; 2
     f0c:	f1 f4       	brne	.+60     	; 0xf4a <__vector_3+0x108>
		{
			alarm_set_idx = !alarm_set_idx;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <alarm_set_idx>
     f16:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <alarm_set_idx+0x1>
     f1a:	23 2b       	or	r18, r19
     f1c:	11 f0       	breq	.+4      	; 0xf22 <__vector_3+0xe0>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <alarm_set_idx+0x1>
     f26:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <alarm_set_idx>
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	95 ea       	ldi	r25, 0xA5	; 165
     f2e:	2e e0       	ldi	r18, 0x0E	; 14
     f30:	81 50       	subi	r24, 0x01	; 1
     f32:	90 40       	sbci	r25, 0x00	; 0
     f34:	20 40       	sbci	r18, 0x00	; 0
     f36:	e1 f7       	brne	.-8      	; 0xf30 <__vector_3+0xee>
     f38:	00 c0       	rjmp	.+0      	; 0xf3a <__vector_3+0xf8>
     f3a:	00 00       	nop
			_delay_ms(300);
		}
	}
}
     f3c:	06 c0       	rjmp	.+12     	; 0xf4a <__vector_3+0x108>
	{
		cnt++;
		_delay_ms(1);
	}
	
	if (cnt > LONGTIME)
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	9a 81       	ldd	r25, Y+2	; 0x02
     f42:	89 3e       	cpi	r24, 0xE9	; 233
     f44:	93 40       	sbci	r25, 0x03	; 3
     f46:	08 f0       	brcs	.+2      	; 0xf4a <__vector_3+0x108>
     f48:	b3 cf       	rjmp	.-154    	; 0xeb0 <__vector_3+0x6e>
		{
			alarm_set_idx = !alarm_set_idx;
			_delay_ms(300);
		}
	}
}
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	3f 91       	pop	r19
     f62:	2f 91       	pop	r18
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <__vector_4>:

ISR(INT3_vect) // Mode
{
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	00 d0       	rcall	.+0      	; 0xf84 <__vector_4+0x16>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t cnt = 0;
     f88:	1a 82       	std	Y+2, r1	; 0x02
     f8a:	19 82       	std	Y+1, r1	; 0x01
	while (!(PIND & 0x08))
     f8c:	83 99       	sbic	0x10, 3	; 16
     f8e:	0d c0       	rjmp	.+26     	; 0xfaa <__vector_4+0x3c>
	{
		cnt++;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	8f e9       	ldi	r24, 0x9F	; 159
     f9c:	9f e0       	ldi	r25, 0x0F	; 15
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <__vector_4+0x30>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <__vector_4+0x36>
     fa4:	00 00       	nop
}

ISR(INT3_vect) // Mode
{
	volatile uint16_t cnt = 0;
	while (!(PIND & 0x08))
     fa6:	83 9b       	sbis	0x10, 3	; 16
     fa8:	f3 cf       	rjmp	.-26     	; 0xf90 <__vector_4+0x22>
	{
		cnt++;
		_delay_ms(1);
	}
	if (cnt > LONGTIME)
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	89 3e       	cpi	r24, 0xE9	; 233
     fb0:	93 40       	sbci	r25, 0x03	; 3
     fb2:	68 f0       	brcs	.+26     	; 0xfce <__vector_4+0x60>
	{
		if (mode == MAIN)
     fb4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <mode>
     fb8:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <mode+0x1>
     fbc:	89 2b       	or	r24, r25
     fbe:	71 f5       	brne	.+92     	; 0x101c <__vector_4+0xae>
		{
			mode = SETTIME;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <mode+0x1>
     fc8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <mode>
     fcc:	27 c0       	rjmp	.+78     	; 0x101c <__vector_4+0xae>
		}
	}
	else
	{
		if (mode == SETTIME && cnt > 200)
     fce:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <mode>
     fd2:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <mode+0x1>
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	91 05       	cpc	r25, r1
     fda:	51 f4       	brne	.+20     	; 0xff0 <__vector_4+0x82>
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	89 3c       	cpi	r24, 0xC9	; 201
     fe2:	91 05       	cpc	r25, r1
     fe4:	d8 f0       	brcs	.+54     	; 0x101c <__vector_4+0xae>
		{
			mode = MAIN;
     fe6:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <mode+0x1>
     fea:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <mode>
     fee:	16 c0       	rjmp	.+44     	; 0x101c <__vector_4+0xae>
		}
		
		if (mode == ALARM && isAlarmSetting)
     ff0:	02 97       	sbiw	r24, 0x02	; 2
     ff2:	a1 f4       	brne	.+40     	; 0x101c <__vector_4+0xae>
     ff4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__data_end>
     ff8:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <__data_end+0x1>
     ffc:	89 2b       	or	r24, r25
     ffe:	71 f0       	breq	.+28     	; 0x101c <__vector_4+0xae>
		{
			isAlarmSetting = 0;
    1000:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <__data_end+0x1>
    1004:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <__data_end>
			isAlarmOn = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <isAlarmOn+0x1>
    1010:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <isAlarmOn>
			mode = MAIN;
    1014:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <mode+0x1>
    1018:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <mode>
		}
		
	}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	9f 91       	pop	r25
    1026:	8f 91       	pop	r24
    1028:	2f 91       	pop	r18
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	0f 90       	pop	r0
    1030:	1f 90       	pop	r1
    1032:	18 95       	reti

00001034 <__divmodhi4>:
    1034:	97 fb       	bst	r25, 7
    1036:	07 2e       	mov	r0, r23
    1038:	16 f4       	brtc	.+4      	; 0x103e <__divmodhi4+0xa>
    103a:	00 94       	com	r0
    103c:	06 d0       	rcall	.+12     	; 0x104a <__divmodhi4_neg1>
    103e:	77 fd       	sbrc	r23, 7
    1040:	08 d0       	rcall	.+16     	; 0x1052 <__divmodhi4_neg2>
    1042:	0b d0       	rcall	.+22     	; 0x105a <__udivmodhi4>
    1044:	07 fc       	sbrc	r0, 7
    1046:	05 d0       	rcall	.+10     	; 0x1052 <__divmodhi4_neg2>
    1048:	3e f4       	brtc	.+14     	; 0x1058 <__divmodhi4_exit>

0000104a <__divmodhi4_neg1>:
    104a:	90 95       	com	r25
    104c:	81 95       	neg	r24
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	08 95       	ret

00001052 <__divmodhi4_neg2>:
    1052:	70 95       	com	r23
    1054:	61 95       	neg	r22
    1056:	7f 4f       	sbci	r23, 0xFF	; 255

00001058 <__divmodhi4_exit>:
    1058:	08 95       	ret

0000105a <__udivmodhi4>:
    105a:	aa 1b       	sub	r26, r26
    105c:	bb 1b       	sub	r27, r27
    105e:	51 e1       	ldi	r21, 0x11	; 17
    1060:	07 c0       	rjmp	.+14     	; 0x1070 <__udivmodhi4_ep>

00001062 <__udivmodhi4_loop>:
    1062:	aa 1f       	adc	r26, r26
    1064:	bb 1f       	adc	r27, r27
    1066:	a6 17       	cp	r26, r22
    1068:	b7 07       	cpc	r27, r23
    106a:	10 f0       	brcs	.+4      	; 0x1070 <__udivmodhi4_ep>
    106c:	a6 1b       	sub	r26, r22
    106e:	b7 0b       	sbc	r27, r23

00001070 <__udivmodhi4_ep>:
    1070:	88 1f       	adc	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	5a 95       	dec	r21
    1076:	a9 f7       	brne	.-22     	; 0x1062 <__udivmodhi4_loop>
    1078:	80 95       	com	r24
    107a:	90 95       	com	r25
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	08 95       	ret

00001082 <sprintf>:
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	2e 97       	sbiw	r28, 0x0e	; 14
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	0d 89       	ldd	r16, Y+21	; 0x15
    109c:	1e 89       	ldd	r17, Y+22	; 0x16
    109e:	86 e0       	ldi	r24, 0x06	; 6
    10a0:	8c 83       	std	Y+4, r24	; 0x04
    10a2:	1a 83       	std	Y+2, r17	; 0x02
    10a4:	09 83       	std	Y+1, r16	; 0x01
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	9f e7       	ldi	r25, 0x7F	; 127
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	ae 01       	movw	r20, r28
    10b0:	47 5e       	subi	r20, 0xE7	; 231
    10b2:	5f 4f       	sbci	r21, 0xFF	; 255
    10b4:	6f 89       	ldd	r22, Y+23	; 0x17
    10b6:	78 8d       	ldd	r23, Y+24	; 0x18
    10b8:	ce 01       	movw	r24, r28
    10ba:	01 96       	adiw	r24, 0x01	; 1
    10bc:	10 d0       	rcall	.+32     	; 0x10de <vfprintf>
    10be:	ef 81       	ldd	r30, Y+7	; 0x07
    10c0:	f8 85       	ldd	r31, Y+8	; 0x08
    10c2:	e0 0f       	add	r30, r16
    10c4:	f1 1f       	adc	r31, r17
    10c6:	10 82       	st	Z, r1
    10c8:	2e 96       	adiw	r28, 0x0e	; 14
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	08 95       	ret

000010de <vfprintf>:
    10de:	2f 92       	push	r2
    10e0:	3f 92       	push	r3
    10e2:	4f 92       	push	r4
    10e4:	5f 92       	push	r5
    10e6:	6f 92       	push	r6
    10e8:	7f 92       	push	r7
    10ea:	8f 92       	push	r8
    10ec:	9f 92       	push	r9
    10ee:	af 92       	push	r10
    10f0:	bf 92       	push	r11
    10f2:	cf 92       	push	r12
    10f4:	df 92       	push	r13
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	2b 97       	sbiw	r28, 0x0b	; 11
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	6c 01       	movw	r12, r24
    1114:	7b 01       	movw	r14, r22
    1116:	8a 01       	movw	r16, r20
    1118:	fc 01       	movw	r30, r24
    111a:	17 82       	std	Z+7, r1	; 0x07
    111c:	16 82       	std	Z+6, r1	; 0x06
    111e:	83 81       	ldd	r24, Z+3	; 0x03
    1120:	81 ff       	sbrs	r24, 1
    1122:	bf c1       	rjmp	.+894    	; 0x14a2 <__stack+0x3a3>
    1124:	ce 01       	movw	r24, r28
    1126:	01 96       	adiw	r24, 0x01	; 1
    1128:	3c 01       	movw	r6, r24
    112a:	f6 01       	movw	r30, r12
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	f7 01       	movw	r30, r14
    1130:	93 fd       	sbrc	r25, 3
    1132:	85 91       	lpm	r24, Z+
    1134:	93 ff       	sbrs	r25, 3
    1136:	81 91       	ld	r24, Z+
    1138:	7f 01       	movw	r14, r30
    113a:	88 23       	and	r24, r24
    113c:	09 f4       	brne	.+2      	; 0x1140 <__stack+0x41>
    113e:	ad c1       	rjmp	.+858    	; 0x149a <__stack+0x39b>
    1140:	85 32       	cpi	r24, 0x25	; 37
    1142:	39 f4       	brne	.+14     	; 0x1152 <__stack+0x53>
    1144:	93 fd       	sbrc	r25, 3
    1146:	85 91       	lpm	r24, Z+
    1148:	93 ff       	sbrs	r25, 3
    114a:	81 91       	ld	r24, Z+
    114c:	7f 01       	movw	r14, r30
    114e:	85 32       	cpi	r24, 0x25	; 37
    1150:	21 f4       	brne	.+8      	; 0x115a <__stack+0x5b>
    1152:	b6 01       	movw	r22, r12
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	d6 d1       	rcall	.+940    	; 0x1504 <fputc>
    1158:	e8 cf       	rjmp	.-48     	; 0x112a <__stack+0x2b>
    115a:	91 2c       	mov	r9, r1
    115c:	21 2c       	mov	r2, r1
    115e:	31 2c       	mov	r3, r1
    1160:	ff e1       	ldi	r31, 0x1F	; 31
    1162:	f3 15       	cp	r31, r3
    1164:	d8 f0       	brcs	.+54     	; 0x119c <__stack+0x9d>
    1166:	8b 32       	cpi	r24, 0x2B	; 43
    1168:	79 f0       	breq	.+30     	; 0x1188 <__stack+0x89>
    116a:	38 f4       	brcc	.+14     	; 0x117a <__stack+0x7b>
    116c:	80 32       	cpi	r24, 0x20	; 32
    116e:	79 f0       	breq	.+30     	; 0x118e <__stack+0x8f>
    1170:	83 32       	cpi	r24, 0x23	; 35
    1172:	a1 f4       	brne	.+40     	; 0x119c <__stack+0x9d>
    1174:	23 2d       	mov	r18, r3
    1176:	20 61       	ori	r18, 0x10	; 16
    1178:	1d c0       	rjmp	.+58     	; 0x11b4 <__stack+0xb5>
    117a:	8d 32       	cpi	r24, 0x2D	; 45
    117c:	61 f0       	breq	.+24     	; 0x1196 <__stack+0x97>
    117e:	80 33       	cpi	r24, 0x30	; 48
    1180:	69 f4       	brne	.+26     	; 0x119c <__stack+0x9d>
    1182:	23 2d       	mov	r18, r3
    1184:	21 60       	ori	r18, 0x01	; 1
    1186:	16 c0       	rjmp	.+44     	; 0x11b4 <__stack+0xb5>
    1188:	83 2d       	mov	r24, r3
    118a:	82 60       	ori	r24, 0x02	; 2
    118c:	38 2e       	mov	r3, r24
    118e:	e3 2d       	mov	r30, r3
    1190:	e4 60       	ori	r30, 0x04	; 4
    1192:	3e 2e       	mov	r3, r30
    1194:	2a c0       	rjmp	.+84     	; 0x11ea <__stack+0xeb>
    1196:	f3 2d       	mov	r31, r3
    1198:	f8 60       	ori	r31, 0x08	; 8
    119a:	1d c0       	rjmp	.+58     	; 0x11d6 <__stack+0xd7>
    119c:	37 fc       	sbrc	r3, 7
    119e:	2d c0       	rjmp	.+90     	; 0x11fa <__stack+0xfb>
    11a0:	20 ed       	ldi	r18, 0xD0	; 208
    11a2:	28 0f       	add	r18, r24
    11a4:	2a 30       	cpi	r18, 0x0A	; 10
    11a6:	40 f0       	brcs	.+16     	; 0x11b8 <__stack+0xb9>
    11a8:	8e 32       	cpi	r24, 0x2E	; 46
    11aa:	b9 f4       	brne	.+46     	; 0x11da <__stack+0xdb>
    11ac:	36 fc       	sbrc	r3, 6
    11ae:	75 c1       	rjmp	.+746    	; 0x149a <__stack+0x39b>
    11b0:	23 2d       	mov	r18, r3
    11b2:	20 64       	ori	r18, 0x40	; 64
    11b4:	32 2e       	mov	r3, r18
    11b6:	19 c0       	rjmp	.+50     	; 0x11ea <__stack+0xeb>
    11b8:	36 fe       	sbrs	r3, 6
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <__stack+0xc9>
    11bc:	8a e0       	ldi	r24, 0x0A	; 10
    11be:	98 9e       	mul	r9, r24
    11c0:	20 0d       	add	r18, r0
    11c2:	11 24       	eor	r1, r1
    11c4:	92 2e       	mov	r9, r18
    11c6:	11 c0       	rjmp	.+34     	; 0x11ea <__stack+0xeb>
    11c8:	ea e0       	ldi	r30, 0x0A	; 10
    11ca:	2e 9e       	mul	r2, r30
    11cc:	20 0d       	add	r18, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	22 2e       	mov	r2, r18
    11d2:	f3 2d       	mov	r31, r3
    11d4:	f0 62       	ori	r31, 0x20	; 32
    11d6:	3f 2e       	mov	r3, r31
    11d8:	08 c0       	rjmp	.+16     	; 0x11ea <__stack+0xeb>
    11da:	8c 36       	cpi	r24, 0x6C	; 108
    11dc:	21 f4       	brne	.+8      	; 0x11e6 <__stack+0xe7>
    11de:	83 2d       	mov	r24, r3
    11e0:	80 68       	ori	r24, 0x80	; 128
    11e2:	38 2e       	mov	r3, r24
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <__stack+0xeb>
    11e6:	88 36       	cpi	r24, 0x68	; 104
    11e8:	41 f4       	brne	.+16     	; 0x11fa <__stack+0xfb>
    11ea:	f7 01       	movw	r30, r14
    11ec:	93 fd       	sbrc	r25, 3
    11ee:	85 91       	lpm	r24, Z+
    11f0:	93 ff       	sbrs	r25, 3
    11f2:	81 91       	ld	r24, Z+
    11f4:	7f 01       	movw	r14, r30
    11f6:	81 11       	cpse	r24, r1
    11f8:	b3 cf       	rjmp	.-154    	; 0x1160 <__stack+0x61>
    11fa:	98 2f       	mov	r25, r24
    11fc:	9f 7d       	andi	r25, 0xDF	; 223
    11fe:	95 54       	subi	r25, 0x45	; 69
    1200:	93 30       	cpi	r25, 0x03	; 3
    1202:	28 f4       	brcc	.+10     	; 0x120e <__stack+0x10f>
    1204:	0c 5f       	subi	r16, 0xFC	; 252
    1206:	1f 4f       	sbci	r17, 0xFF	; 255
    1208:	9f e3       	ldi	r25, 0x3F	; 63
    120a:	99 83       	std	Y+1, r25	; 0x01
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <__stack+0x129>
    120e:	83 36       	cpi	r24, 0x63	; 99
    1210:	31 f0       	breq	.+12     	; 0x121e <__stack+0x11f>
    1212:	83 37       	cpi	r24, 0x73	; 115
    1214:	71 f0       	breq	.+28     	; 0x1232 <__stack+0x133>
    1216:	83 35       	cpi	r24, 0x53	; 83
    1218:	09 f0       	breq	.+2      	; 0x121c <__stack+0x11d>
    121a:	55 c0       	rjmp	.+170    	; 0x12c6 <__stack+0x1c7>
    121c:	20 c0       	rjmp	.+64     	; 0x125e <__stack+0x15f>
    121e:	f8 01       	movw	r30, r16
    1220:	80 81       	ld	r24, Z
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	0e 5f       	subi	r16, 0xFE	; 254
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
    1228:	88 24       	eor	r8, r8
    122a:	83 94       	inc	r8
    122c:	91 2c       	mov	r9, r1
    122e:	53 01       	movw	r10, r6
    1230:	12 c0       	rjmp	.+36     	; 0x1256 <__stack+0x157>
    1232:	28 01       	movw	r4, r16
    1234:	f2 e0       	ldi	r31, 0x02	; 2
    1236:	4f 0e       	add	r4, r31
    1238:	51 1c       	adc	r5, r1
    123a:	f8 01       	movw	r30, r16
    123c:	a0 80       	ld	r10, Z
    123e:	b1 80       	ldd	r11, Z+1	; 0x01
    1240:	36 fe       	sbrs	r3, 6
    1242:	03 c0       	rjmp	.+6      	; 0x124a <__stack+0x14b>
    1244:	69 2d       	mov	r22, r9
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	02 c0       	rjmp	.+4      	; 0x124e <__stack+0x14f>
    124a:	6f ef       	ldi	r22, 0xFF	; 255
    124c:	7f ef       	ldi	r23, 0xFF	; 255
    124e:	c5 01       	movw	r24, r10
    1250:	4e d1       	rcall	.+668    	; 0x14ee <strnlen>
    1252:	4c 01       	movw	r8, r24
    1254:	82 01       	movw	r16, r4
    1256:	f3 2d       	mov	r31, r3
    1258:	ff 77       	andi	r31, 0x7F	; 127
    125a:	3f 2e       	mov	r3, r31
    125c:	15 c0       	rjmp	.+42     	; 0x1288 <__stack+0x189>
    125e:	28 01       	movw	r4, r16
    1260:	22 e0       	ldi	r18, 0x02	; 2
    1262:	42 0e       	add	r4, r18
    1264:	51 1c       	adc	r5, r1
    1266:	f8 01       	movw	r30, r16
    1268:	a0 80       	ld	r10, Z
    126a:	b1 80       	ldd	r11, Z+1	; 0x01
    126c:	36 fe       	sbrs	r3, 6
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <__stack+0x177>
    1270:	69 2d       	mov	r22, r9
    1272:	70 e0       	ldi	r23, 0x00	; 0
    1274:	02 c0       	rjmp	.+4      	; 0x127a <__stack+0x17b>
    1276:	6f ef       	ldi	r22, 0xFF	; 255
    1278:	7f ef       	ldi	r23, 0xFF	; 255
    127a:	c5 01       	movw	r24, r10
    127c:	2d d1       	rcall	.+602    	; 0x14d8 <strnlen_P>
    127e:	4c 01       	movw	r8, r24
    1280:	f3 2d       	mov	r31, r3
    1282:	f0 68       	ori	r31, 0x80	; 128
    1284:	3f 2e       	mov	r3, r31
    1286:	82 01       	movw	r16, r4
    1288:	33 fc       	sbrc	r3, 3
    128a:	19 c0       	rjmp	.+50     	; 0x12be <__stack+0x1bf>
    128c:	82 2d       	mov	r24, r2
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	88 16       	cp	r8, r24
    1292:	99 06       	cpc	r9, r25
    1294:	a0 f4       	brcc	.+40     	; 0x12be <__stack+0x1bf>
    1296:	b6 01       	movw	r22, r12
    1298:	80 e2       	ldi	r24, 0x20	; 32
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	33 d1       	rcall	.+614    	; 0x1504 <fputc>
    129e:	2a 94       	dec	r2
    12a0:	f5 cf       	rjmp	.-22     	; 0x128c <__stack+0x18d>
    12a2:	f5 01       	movw	r30, r10
    12a4:	37 fc       	sbrc	r3, 7
    12a6:	85 91       	lpm	r24, Z+
    12a8:	37 fe       	sbrs	r3, 7
    12aa:	81 91       	ld	r24, Z+
    12ac:	5f 01       	movw	r10, r30
    12ae:	b6 01       	movw	r22, r12
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	28 d1       	rcall	.+592    	; 0x1504 <fputc>
    12b4:	21 10       	cpse	r2, r1
    12b6:	2a 94       	dec	r2
    12b8:	21 e0       	ldi	r18, 0x01	; 1
    12ba:	82 1a       	sub	r8, r18
    12bc:	91 08       	sbc	r9, r1
    12be:	81 14       	cp	r8, r1
    12c0:	91 04       	cpc	r9, r1
    12c2:	79 f7       	brne	.-34     	; 0x12a2 <__stack+0x1a3>
    12c4:	e1 c0       	rjmp	.+450    	; 0x1488 <__stack+0x389>
    12c6:	84 36       	cpi	r24, 0x64	; 100
    12c8:	11 f0       	breq	.+4      	; 0x12ce <__stack+0x1cf>
    12ca:	89 36       	cpi	r24, 0x69	; 105
    12cc:	39 f5       	brne	.+78     	; 0x131c <__stack+0x21d>
    12ce:	f8 01       	movw	r30, r16
    12d0:	37 fe       	sbrs	r3, 7
    12d2:	07 c0       	rjmp	.+14     	; 0x12e2 <__stack+0x1e3>
    12d4:	60 81       	ld	r22, Z
    12d6:	71 81       	ldd	r23, Z+1	; 0x01
    12d8:	82 81       	ldd	r24, Z+2	; 0x02
    12da:	93 81       	ldd	r25, Z+3	; 0x03
    12dc:	0c 5f       	subi	r16, 0xFC	; 252
    12de:	1f 4f       	sbci	r17, 0xFF	; 255
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <__stack+0x1f3>
    12e2:	60 81       	ld	r22, Z
    12e4:	71 81       	ldd	r23, Z+1	; 0x01
    12e6:	07 2e       	mov	r0, r23
    12e8:	00 0c       	add	r0, r0
    12ea:	88 0b       	sbc	r24, r24
    12ec:	99 0b       	sbc	r25, r25
    12ee:	0e 5f       	subi	r16, 0xFE	; 254
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	f3 2d       	mov	r31, r3
    12f4:	ff 76       	andi	r31, 0x6F	; 111
    12f6:	3f 2e       	mov	r3, r31
    12f8:	97 ff       	sbrs	r25, 7
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <__stack+0x20f>
    12fc:	90 95       	com	r25
    12fe:	80 95       	com	r24
    1300:	70 95       	com	r23
    1302:	61 95       	neg	r22
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	8f 4f       	sbci	r24, 0xFF	; 255
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	f0 68       	ori	r31, 0x80	; 128
    130c:	3f 2e       	mov	r3, r31
    130e:	2a e0       	ldi	r18, 0x0A	; 10
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	a3 01       	movw	r20, r6
    1314:	33 d1       	rcall	.+614    	; 0x157c <__ultoa_invert>
    1316:	88 2e       	mov	r8, r24
    1318:	86 18       	sub	r8, r6
    131a:	44 c0       	rjmp	.+136    	; 0x13a4 <__stack+0x2a5>
    131c:	85 37       	cpi	r24, 0x75	; 117
    131e:	31 f4       	brne	.+12     	; 0x132c <__stack+0x22d>
    1320:	23 2d       	mov	r18, r3
    1322:	2f 7e       	andi	r18, 0xEF	; 239
    1324:	b2 2e       	mov	r11, r18
    1326:	2a e0       	ldi	r18, 0x0A	; 10
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	25 c0       	rjmp	.+74     	; 0x1376 <__stack+0x277>
    132c:	93 2d       	mov	r25, r3
    132e:	99 7f       	andi	r25, 0xF9	; 249
    1330:	b9 2e       	mov	r11, r25
    1332:	8f 36       	cpi	r24, 0x6F	; 111
    1334:	c1 f0       	breq	.+48     	; 0x1366 <__stack+0x267>
    1336:	18 f4       	brcc	.+6      	; 0x133e <__stack+0x23f>
    1338:	88 35       	cpi	r24, 0x58	; 88
    133a:	79 f0       	breq	.+30     	; 0x135a <__stack+0x25b>
    133c:	ae c0       	rjmp	.+348    	; 0x149a <__stack+0x39b>
    133e:	80 37       	cpi	r24, 0x70	; 112
    1340:	19 f0       	breq	.+6      	; 0x1348 <__stack+0x249>
    1342:	88 37       	cpi	r24, 0x78	; 120
    1344:	21 f0       	breq	.+8      	; 0x134e <__stack+0x24f>
    1346:	a9 c0       	rjmp	.+338    	; 0x149a <__stack+0x39b>
    1348:	e9 2f       	mov	r30, r25
    134a:	e0 61       	ori	r30, 0x10	; 16
    134c:	be 2e       	mov	r11, r30
    134e:	b4 fe       	sbrs	r11, 4
    1350:	0d c0       	rjmp	.+26     	; 0x136c <__stack+0x26d>
    1352:	fb 2d       	mov	r31, r11
    1354:	f4 60       	ori	r31, 0x04	; 4
    1356:	bf 2e       	mov	r11, r31
    1358:	09 c0       	rjmp	.+18     	; 0x136c <__stack+0x26d>
    135a:	34 fe       	sbrs	r3, 4
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <__stack+0x273>
    135e:	29 2f       	mov	r18, r25
    1360:	26 60       	ori	r18, 0x06	; 6
    1362:	b2 2e       	mov	r11, r18
    1364:	06 c0       	rjmp	.+12     	; 0x1372 <__stack+0x273>
    1366:	28 e0       	ldi	r18, 0x08	; 8
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <__stack+0x277>
    136c:	20 e1       	ldi	r18, 0x10	; 16
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <__stack+0x277>
    1372:	20 e1       	ldi	r18, 0x10	; 16
    1374:	32 e0       	ldi	r19, 0x02	; 2
    1376:	f8 01       	movw	r30, r16
    1378:	b7 fe       	sbrs	r11, 7
    137a:	07 c0       	rjmp	.+14     	; 0x138a <__stack+0x28b>
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	0c 5f       	subi	r16, 0xFC	; 252
    1386:	1f 4f       	sbci	r17, 0xFF	; 255
    1388:	06 c0       	rjmp	.+12     	; 0x1396 <__stack+0x297>
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 5f       	subi	r16, 0xFE	; 254
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	a3 01       	movw	r20, r6
    1398:	f1 d0       	rcall	.+482    	; 0x157c <__ultoa_invert>
    139a:	88 2e       	mov	r8, r24
    139c:	86 18       	sub	r8, r6
    139e:	fb 2d       	mov	r31, r11
    13a0:	ff 77       	andi	r31, 0x7F	; 127
    13a2:	3f 2e       	mov	r3, r31
    13a4:	36 fe       	sbrs	r3, 6
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <__stack+0x2c3>
    13a8:	23 2d       	mov	r18, r3
    13aa:	2e 7f       	andi	r18, 0xFE	; 254
    13ac:	a2 2e       	mov	r10, r18
    13ae:	89 14       	cp	r8, r9
    13b0:	58 f4       	brcc	.+22     	; 0x13c8 <__stack+0x2c9>
    13b2:	34 fe       	sbrs	r3, 4
    13b4:	0b c0       	rjmp	.+22     	; 0x13cc <__stack+0x2cd>
    13b6:	32 fc       	sbrc	r3, 2
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <__stack+0x2cd>
    13ba:	83 2d       	mov	r24, r3
    13bc:	8e 7e       	andi	r24, 0xEE	; 238
    13be:	a8 2e       	mov	r10, r24
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <__stack+0x2cd>
    13c2:	b8 2c       	mov	r11, r8
    13c4:	a3 2c       	mov	r10, r3
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <__stack+0x2cf>
    13c8:	b8 2c       	mov	r11, r8
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <__stack+0x2cf>
    13cc:	b9 2c       	mov	r11, r9
    13ce:	a4 fe       	sbrs	r10, 4
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <__stack+0x2f1>
    13d2:	fe 01       	movw	r30, r28
    13d4:	e8 0d       	add	r30, r8
    13d6:	f1 1d       	adc	r31, r1
    13d8:	80 81       	ld	r24, Z
    13da:	80 33       	cpi	r24, 0x30	; 48
    13dc:	21 f4       	brne	.+8      	; 0x13e6 <__stack+0x2e7>
    13de:	9a 2d       	mov	r25, r10
    13e0:	99 7e       	andi	r25, 0xE9	; 233
    13e2:	a9 2e       	mov	r10, r25
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <__stack+0x2f9>
    13e6:	a2 fe       	sbrs	r10, 2
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <__stack+0x2f7>
    13ea:	b3 94       	inc	r11
    13ec:	b3 94       	inc	r11
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <__stack+0x2f9>
    13f0:	8a 2d       	mov	r24, r10
    13f2:	86 78       	andi	r24, 0x86	; 134
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <__stack+0x2f9>
    13f6:	b3 94       	inc	r11
    13f8:	a3 fc       	sbrc	r10, 3
    13fa:	10 c0       	rjmp	.+32     	; 0x141c <__stack+0x31d>
    13fc:	a0 fe       	sbrs	r10, 0
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <__stack+0x30d>
    1400:	b2 14       	cp	r11, r2
    1402:	80 f4       	brcc	.+32     	; 0x1424 <__stack+0x325>
    1404:	28 0c       	add	r2, r8
    1406:	92 2c       	mov	r9, r2
    1408:	9b 18       	sub	r9, r11
    140a:	0d c0       	rjmp	.+26     	; 0x1426 <__stack+0x327>
    140c:	b2 14       	cp	r11, r2
    140e:	58 f4       	brcc	.+22     	; 0x1426 <__stack+0x327>
    1410:	b6 01       	movw	r22, r12
    1412:	80 e2       	ldi	r24, 0x20	; 32
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	76 d0       	rcall	.+236    	; 0x1504 <fputc>
    1418:	b3 94       	inc	r11
    141a:	f8 cf       	rjmp	.-16     	; 0x140c <__stack+0x30d>
    141c:	b2 14       	cp	r11, r2
    141e:	18 f4       	brcc	.+6      	; 0x1426 <__stack+0x327>
    1420:	2b 18       	sub	r2, r11
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <__stack+0x329>
    1424:	98 2c       	mov	r9, r8
    1426:	21 2c       	mov	r2, r1
    1428:	a4 fe       	sbrs	r10, 4
    142a:	0f c0       	rjmp	.+30     	; 0x144a <__stack+0x34b>
    142c:	b6 01       	movw	r22, r12
    142e:	80 e3       	ldi	r24, 0x30	; 48
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	68 d0       	rcall	.+208    	; 0x1504 <fputc>
    1434:	a2 fe       	sbrs	r10, 2
    1436:	16 c0       	rjmp	.+44     	; 0x1464 <__stack+0x365>
    1438:	a1 fc       	sbrc	r10, 1
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <__stack+0x343>
    143c:	88 e7       	ldi	r24, 0x78	; 120
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <__stack+0x347>
    1442:	88 e5       	ldi	r24, 0x58	; 88
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	b6 01       	movw	r22, r12
    1448:	0c c0       	rjmp	.+24     	; 0x1462 <__stack+0x363>
    144a:	8a 2d       	mov	r24, r10
    144c:	86 78       	andi	r24, 0x86	; 134
    144e:	51 f0       	breq	.+20     	; 0x1464 <__stack+0x365>
    1450:	a1 fe       	sbrs	r10, 1
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <__stack+0x359>
    1454:	8b e2       	ldi	r24, 0x2B	; 43
    1456:	01 c0       	rjmp	.+2      	; 0x145a <__stack+0x35b>
    1458:	80 e2       	ldi	r24, 0x20	; 32
    145a:	a7 fc       	sbrc	r10, 7
    145c:	8d e2       	ldi	r24, 0x2D	; 45
    145e:	b6 01       	movw	r22, r12
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	50 d0       	rcall	.+160    	; 0x1504 <fputc>
    1464:	89 14       	cp	r8, r9
    1466:	30 f4       	brcc	.+12     	; 0x1474 <__stack+0x375>
    1468:	b6 01       	movw	r22, r12
    146a:	80 e3       	ldi	r24, 0x30	; 48
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	4a d0       	rcall	.+148    	; 0x1504 <fputc>
    1470:	9a 94       	dec	r9
    1472:	f8 cf       	rjmp	.-16     	; 0x1464 <__stack+0x365>
    1474:	8a 94       	dec	r8
    1476:	f3 01       	movw	r30, r6
    1478:	e8 0d       	add	r30, r8
    147a:	f1 1d       	adc	r31, r1
    147c:	80 81       	ld	r24, Z
    147e:	b6 01       	movw	r22, r12
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	40 d0       	rcall	.+128    	; 0x1504 <fputc>
    1484:	81 10       	cpse	r8, r1
    1486:	f6 cf       	rjmp	.-20     	; 0x1474 <__stack+0x375>
    1488:	22 20       	and	r2, r2
    148a:	09 f4       	brne	.+2      	; 0x148e <__stack+0x38f>
    148c:	4e ce       	rjmp	.-868    	; 0x112a <__stack+0x2b>
    148e:	b6 01       	movw	r22, r12
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	37 d0       	rcall	.+110    	; 0x1504 <fputc>
    1496:	2a 94       	dec	r2
    1498:	f7 cf       	rjmp	.-18     	; 0x1488 <__stack+0x389>
    149a:	f6 01       	movw	r30, r12
    149c:	86 81       	ldd	r24, Z+6	; 0x06
    149e:	97 81       	ldd	r25, Z+7	; 0x07
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <__stack+0x3a7>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	2b 96       	adiw	r28, 0x0b	; 11
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	cf 90       	pop	r12
    14c2:	bf 90       	pop	r11
    14c4:	af 90       	pop	r10
    14c6:	9f 90       	pop	r9
    14c8:	8f 90       	pop	r8
    14ca:	7f 90       	pop	r7
    14cc:	6f 90       	pop	r6
    14ce:	5f 90       	pop	r5
    14d0:	4f 90       	pop	r4
    14d2:	3f 90       	pop	r3
    14d4:	2f 90       	pop	r2
    14d6:	08 95       	ret

000014d8 <strnlen_P>:
    14d8:	fc 01       	movw	r30, r24
    14da:	05 90       	lpm	r0, Z+
    14dc:	61 50       	subi	r22, 0x01	; 1
    14de:	70 40       	sbci	r23, 0x00	; 0
    14e0:	01 10       	cpse	r0, r1
    14e2:	d8 f7       	brcc	.-10     	; 0x14da <strnlen_P+0x2>
    14e4:	80 95       	com	r24
    14e6:	90 95       	com	r25
    14e8:	8e 0f       	add	r24, r30
    14ea:	9f 1f       	adc	r25, r31
    14ec:	08 95       	ret

000014ee <strnlen>:
    14ee:	fc 01       	movw	r30, r24
    14f0:	61 50       	subi	r22, 0x01	; 1
    14f2:	70 40       	sbci	r23, 0x00	; 0
    14f4:	01 90       	ld	r0, Z+
    14f6:	01 10       	cpse	r0, r1
    14f8:	d8 f7       	brcc	.-10     	; 0x14f0 <strnlen+0x2>
    14fa:	80 95       	com	r24
    14fc:	90 95       	com	r25
    14fe:	8e 0f       	add	r24, r30
    1500:	9f 1f       	adc	r25, r31
    1502:	08 95       	ret

00001504 <fputc>:
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	fb 01       	movw	r30, r22
    150e:	23 81       	ldd	r18, Z+3	; 0x03
    1510:	21 fd       	sbrc	r18, 1
    1512:	03 c0       	rjmp	.+6      	; 0x151a <fputc+0x16>
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	9f ef       	ldi	r25, 0xFF	; 255
    1518:	2c c0       	rjmp	.+88     	; 0x1572 <fputc+0x6e>
    151a:	22 ff       	sbrs	r18, 2
    151c:	16 c0       	rjmp	.+44     	; 0x154a <fputc+0x46>
    151e:	46 81       	ldd	r20, Z+6	; 0x06
    1520:	57 81       	ldd	r21, Z+7	; 0x07
    1522:	24 81       	ldd	r18, Z+4	; 0x04
    1524:	35 81       	ldd	r19, Z+5	; 0x05
    1526:	42 17       	cp	r20, r18
    1528:	53 07       	cpc	r21, r19
    152a:	44 f4       	brge	.+16     	; 0x153c <fputc+0x38>
    152c:	a0 81       	ld	r26, Z
    152e:	b1 81       	ldd	r27, Z+1	; 0x01
    1530:	9d 01       	movw	r18, r26
    1532:	2f 5f       	subi	r18, 0xFF	; 255
    1534:	3f 4f       	sbci	r19, 0xFF	; 255
    1536:	31 83       	std	Z+1, r19	; 0x01
    1538:	20 83       	st	Z, r18
    153a:	8c 93       	st	X, r24
    153c:	26 81       	ldd	r18, Z+6	; 0x06
    153e:	37 81       	ldd	r19, Z+7	; 0x07
    1540:	2f 5f       	subi	r18, 0xFF	; 255
    1542:	3f 4f       	sbci	r19, 0xFF	; 255
    1544:	37 83       	std	Z+7, r19	; 0x07
    1546:	26 83       	std	Z+6, r18	; 0x06
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <fputc+0x6e>
    154a:	8b 01       	movw	r16, r22
    154c:	ec 01       	movw	r28, r24
    154e:	fb 01       	movw	r30, r22
    1550:	00 84       	ldd	r0, Z+8	; 0x08
    1552:	f1 85       	ldd	r31, Z+9	; 0x09
    1554:	e0 2d       	mov	r30, r0
    1556:	09 95       	icall
    1558:	89 2b       	or	r24, r25
    155a:	e1 f6       	brne	.-72     	; 0x1514 <fputc+0x10>
    155c:	d8 01       	movw	r26, r16
    155e:	16 96       	adiw	r26, 0x06	; 6
    1560:	8d 91       	ld	r24, X+
    1562:	9c 91       	ld	r25, X
    1564:	17 97       	sbiw	r26, 0x07	; 7
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	17 96       	adiw	r26, 0x07	; 7
    156a:	9c 93       	st	X, r25
    156c:	8e 93       	st	-X, r24
    156e:	16 97       	sbiw	r26, 0x06	; 6
    1570:	ce 01       	movw	r24, r28
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <__ultoa_invert>:
    157c:	fa 01       	movw	r30, r20
    157e:	aa 27       	eor	r26, r26
    1580:	28 30       	cpi	r18, 0x08	; 8
    1582:	51 f1       	breq	.+84     	; 0x15d8 <__ultoa_invert+0x5c>
    1584:	20 31       	cpi	r18, 0x10	; 16
    1586:	81 f1       	breq	.+96     	; 0x15e8 <__ultoa_invert+0x6c>
    1588:	e8 94       	clt
    158a:	6f 93       	push	r22
    158c:	6e 7f       	andi	r22, 0xFE	; 254
    158e:	6e 5f       	subi	r22, 0xFE	; 254
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	af 4f       	sbci	r26, 0xFF	; 255
    1598:	b1 e0       	ldi	r27, 0x01	; 1
    159a:	3e d0       	rcall	.+124    	; 0x1618 <__ultoa_invert+0x9c>
    159c:	b4 e0       	ldi	r27, 0x04	; 4
    159e:	3c d0       	rcall	.+120    	; 0x1618 <__ultoa_invert+0x9c>
    15a0:	67 0f       	add	r22, r23
    15a2:	78 1f       	adc	r23, r24
    15a4:	89 1f       	adc	r24, r25
    15a6:	9a 1f       	adc	r25, r26
    15a8:	a1 1d       	adc	r26, r1
    15aa:	68 0f       	add	r22, r24
    15ac:	79 1f       	adc	r23, r25
    15ae:	8a 1f       	adc	r24, r26
    15b0:	91 1d       	adc	r25, r1
    15b2:	a1 1d       	adc	r26, r1
    15b4:	6a 0f       	add	r22, r26
    15b6:	71 1d       	adc	r23, r1
    15b8:	81 1d       	adc	r24, r1
    15ba:	91 1d       	adc	r25, r1
    15bc:	a1 1d       	adc	r26, r1
    15be:	20 d0       	rcall	.+64     	; 0x1600 <__ultoa_invert+0x84>
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <__ultoa_invert+0x48>
    15c2:	68 94       	set
    15c4:	3f 91       	pop	r19
    15c6:	2a e0       	ldi	r18, 0x0A	; 10
    15c8:	26 9f       	mul	r18, r22
    15ca:	11 24       	eor	r1, r1
    15cc:	30 19       	sub	r19, r0
    15ce:	30 5d       	subi	r19, 0xD0	; 208
    15d0:	31 93       	st	Z+, r19
    15d2:	de f6       	brtc	.-74     	; 0x158a <__ultoa_invert+0xe>
    15d4:	cf 01       	movw	r24, r30
    15d6:	08 95       	ret
    15d8:	46 2f       	mov	r20, r22
    15da:	47 70       	andi	r20, 0x07	; 7
    15dc:	40 5d       	subi	r20, 0xD0	; 208
    15de:	41 93       	st	Z+, r20
    15e0:	b3 e0       	ldi	r27, 0x03	; 3
    15e2:	0f d0       	rcall	.+30     	; 0x1602 <__ultoa_invert+0x86>
    15e4:	c9 f7       	brne	.-14     	; 0x15d8 <__ultoa_invert+0x5c>
    15e6:	f6 cf       	rjmp	.-20     	; 0x15d4 <__ultoa_invert+0x58>
    15e8:	46 2f       	mov	r20, r22
    15ea:	4f 70       	andi	r20, 0x0F	; 15
    15ec:	40 5d       	subi	r20, 0xD0	; 208
    15ee:	4a 33       	cpi	r20, 0x3A	; 58
    15f0:	18 f0       	brcs	.+6      	; 0x15f8 <__ultoa_invert+0x7c>
    15f2:	49 5d       	subi	r20, 0xD9	; 217
    15f4:	31 fd       	sbrc	r19, 1
    15f6:	40 52       	subi	r20, 0x20	; 32
    15f8:	41 93       	st	Z+, r20
    15fa:	02 d0       	rcall	.+4      	; 0x1600 <__ultoa_invert+0x84>
    15fc:	a9 f7       	brne	.-22     	; 0x15e8 <__ultoa_invert+0x6c>
    15fe:	ea cf       	rjmp	.-44     	; 0x15d4 <__ultoa_invert+0x58>
    1600:	b4 e0       	ldi	r27, 0x04	; 4
    1602:	a6 95       	lsr	r26
    1604:	97 95       	ror	r25
    1606:	87 95       	ror	r24
    1608:	77 95       	ror	r23
    160a:	67 95       	ror	r22
    160c:	ba 95       	dec	r27
    160e:	c9 f7       	brne	.-14     	; 0x1602 <__ultoa_invert+0x86>
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	61 05       	cpc	r22, r1
    1614:	71 05       	cpc	r23, r1
    1616:	08 95       	ret
    1618:	9b 01       	movw	r18, r22
    161a:	ac 01       	movw	r20, r24
    161c:	0a 2e       	mov	r0, r26
    161e:	06 94       	lsr	r0
    1620:	57 95       	ror	r21
    1622:	47 95       	ror	r20
    1624:	37 95       	ror	r19
    1626:	27 95       	ror	r18
    1628:	ba 95       	dec	r27
    162a:	c9 f7       	brne	.-14     	; 0x161e <__ultoa_invert+0xa2>
    162c:	62 0f       	add	r22, r18
    162e:	73 1f       	adc	r23, r19
    1630:	84 1f       	adc	r24, r20
    1632:	95 1f       	adc	r25, r21
    1634:	a0 1d       	adc	r26, r0
    1636:	08 95       	ret

00001638 <__mulsi3>:
    1638:	db 01       	movw	r26, r22
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	4f d0       	rcall	.+158    	; 0x16de <__muluhisi3>
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	a2 9f       	mul	r26, r18
    1646:	80 0d       	add	r24, r0
    1648:	91 1d       	adc	r25, r1
    164a:	a3 9f       	mul	r26, r19
    164c:	90 0d       	add	r25, r0
    164e:	b2 9f       	mul	r27, r18
    1650:	90 0d       	add	r25, r0
    1652:	11 24       	eor	r1, r1
    1654:	08 95       	ret

00001656 <__udivmodsi4>:
    1656:	a1 e2       	ldi	r26, 0x21	; 33
    1658:	1a 2e       	mov	r1, r26
    165a:	aa 1b       	sub	r26, r26
    165c:	bb 1b       	sub	r27, r27
    165e:	fd 01       	movw	r30, r26
    1660:	0d c0       	rjmp	.+26     	; 0x167c <__udivmodsi4_ep>

00001662 <__udivmodsi4_loop>:
    1662:	aa 1f       	adc	r26, r26
    1664:	bb 1f       	adc	r27, r27
    1666:	ee 1f       	adc	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	a2 17       	cp	r26, r18
    166c:	b3 07       	cpc	r27, r19
    166e:	e4 07       	cpc	r30, r20
    1670:	f5 07       	cpc	r31, r21
    1672:	20 f0       	brcs	.+8      	; 0x167c <__udivmodsi4_ep>
    1674:	a2 1b       	sub	r26, r18
    1676:	b3 0b       	sbc	r27, r19
    1678:	e4 0b       	sbc	r30, r20
    167a:	f5 0b       	sbc	r31, r21

0000167c <__udivmodsi4_ep>:
    167c:	66 1f       	adc	r22, r22
    167e:	77 1f       	adc	r23, r23
    1680:	88 1f       	adc	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	1a 94       	dec	r1
    1686:	69 f7       	brne	.-38     	; 0x1662 <__udivmodsi4_loop>
    1688:	60 95       	com	r22
    168a:	70 95       	com	r23
    168c:	80 95       	com	r24
    168e:	90 95       	com	r25
    1690:	9b 01       	movw	r18, r22
    1692:	ac 01       	movw	r20, r24
    1694:	bd 01       	movw	r22, r26
    1696:	cf 01       	movw	r24, r30
    1698:	08 95       	ret

0000169a <__divmodsi4>:
    169a:	05 2e       	mov	r0, r21
    169c:	97 fb       	bst	r25, 7
    169e:	16 f4       	brtc	.+4      	; 0x16a4 <__divmodsi4+0xa>
    16a0:	00 94       	com	r0
    16a2:	0f d0       	rcall	.+30     	; 0x16c2 <__negsi2>
    16a4:	57 fd       	sbrc	r21, 7
    16a6:	05 d0       	rcall	.+10     	; 0x16b2 <__divmodsi4_neg2>
    16a8:	d6 df       	rcall	.-84     	; 0x1656 <__udivmodsi4>
    16aa:	07 fc       	sbrc	r0, 7
    16ac:	02 d0       	rcall	.+4      	; 0x16b2 <__divmodsi4_neg2>
    16ae:	46 f4       	brtc	.+16     	; 0x16c0 <__divmodsi4_exit>
    16b0:	08 c0       	rjmp	.+16     	; 0x16c2 <__negsi2>

000016b2 <__divmodsi4_neg2>:
    16b2:	50 95       	com	r21
    16b4:	40 95       	com	r20
    16b6:	30 95       	com	r19
    16b8:	21 95       	neg	r18
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	4f 4f       	sbci	r20, 0xFF	; 255
    16be:	5f 4f       	sbci	r21, 0xFF	; 255

000016c0 <__divmodsi4_exit>:
    16c0:	08 95       	ret

000016c2 <__negsi2>:
    16c2:	90 95       	com	r25
    16c4:	80 95       	com	r24
    16c6:	70 95       	com	r23
    16c8:	61 95       	neg	r22
    16ca:	7f 4f       	sbci	r23, 0xFF	; 255
    16cc:	8f 4f       	sbci	r24, 0xFF	; 255
    16ce:	9f 4f       	sbci	r25, 0xFF	; 255
    16d0:	08 95       	ret

000016d2 <__usmulhisi3>:
    16d2:	0f d0       	rcall	.+30     	; 0x16f2 <__umulhisi3>

000016d4 <__usmulhisi3_tail>:
    16d4:	b7 ff       	sbrs	r27, 7
    16d6:	08 95       	ret
    16d8:	82 1b       	sub	r24, r18
    16da:	93 0b       	sbc	r25, r19
    16dc:	08 95       	ret

000016de <__muluhisi3>:
    16de:	09 d0       	rcall	.+18     	; 0x16f2 <__umulhisi3>
    16e0:	a5 9f       	mul	r26, r21
    16e2:	90 0d       	add	r25, r0
    16e4:	b4 9f       	mul	r27, r20
    16e6:	90 0d       	add	r25, r0
    16e8:	a4 9f       	mul	r26, r20
    16ea:	80 0d       	add	r24, r0
    16ec:	91 1d       	adc	r25, r1
    16ee:	11 24       	eor	r1, r1
    16f0:	08 95       	ret

000016f2 <__umulhisi3>:
    16f2:	a2 9f       	mul	r26, r18
    16f4:	b0 01       	movw	r22, r0
    16f6:	b3 9f       	mul	r27, r19
    16f8:	c0 01       	movw	r24, r0
    16fa:	a3 9f       	mul	r26, r19
    16fc:	70 0d       	add	r23, r0
    16fe:	81 1d       	adc	r24, r1
    1700:	11 24       	eor	r1, r1
    1702:	91 1d       	adc	r25, r1
    1704:	b2 9f       	mul	r27, r18
    1706:	70 0d       	add	r23, r0
    1708:	81 1d       	adc	r24, r1
    170a:	11 24       	eor	r1, r1
    170c:	91 1d       	adc	r25, r1
    170e:	08 95       	ret

00001710 <_exit>:
    1710:	f8 94       	cli

00001712 <__stop_program>:
    1712:	ff cf       	rjmp	.-2      	; 0x1712 <__stop_program>
